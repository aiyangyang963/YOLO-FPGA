// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "doImgProc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic doImgProc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic doImgProc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> doImgProc::ap_ST_fsm_state1 = "1";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage4 = "100000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage5 = "1000000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage6 = "10000000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage7 = "100000000";
const sc_lv<13> doImgProc::ap_ST_fsm_pp0_stage8 = "1000000000";
const sc_lv<13> doImgProc::ap_ST_fsm_state17 = "10000000000";
const sc_lv<13> doImgProc::ap_ST_fsm_state18 = "100000000000";
const sc_lv<13> doImgProc::ap_ST_fsm_state19 = "1000000000000";
const sc_lv<32> doImgProc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool doImgProc::ap_const_boolean_1 = true;
const sc_lv<1> doImgProc::ap_const_lv1_0 = "0";
const sc_lv<1> doImgProc::ap_const_lv1_1 = "1";
const sc_lv<2> doImgProc::ap_const_lv2_0 = "00";
const sc_lv<2> doImgProc::ap_const_lv2_2 = "10";
const sc_lv<2> doImgProc::ap_const_lv2_3 = "11";
const sc_lv<2> doImgProc::ap_const_lv2_1 = "1";
const sc_lv<32> doImgProc::ap_const_lv32_2 = "10";
const bool doImgProc::ap_const_boolean_0 = false;
const sc_lv<32> doImgProc::ap_const_lv32_5 = "101";
const sc_lv<32> doImgProc::ap_const_lv32_6 = "110";
const sc_lv<32> doImgProc::ap_const_lv32_B = "1011";
const sc_lv<32> doImgProc::ap_const_lv32_C = "1100";
const int doImgProc::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> doImgProc::ap_const_lv32_4 = "100";
const sc_lv<32> doImgProc::ap_const_lv32_8 = "1000";
const sc_lv<32> doImgProc::ap_const_lv32_3 = "11";
const sc_lv<32> doImgProc::ap_const_lv32_7 = "111";
const sc_lv<32> doImgProc::ap_const_lv32_9 = "1001";
const sc_lv<32> doImgProc::ap_const_lv32_1 = "1";
const sc_lv<17> doImgProc::ap_const_lv17_1 = "1";
const sc_lv<8> doImgProc::ap_const_lv8_0 = "00000000";
const sc_lv<32> doImgProc::ap_const_lv32_A = "1010";
const sc_lv<64> doImgProc::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> doImgProc::ap_const_lv64_1 = "1";
const sc_lv<64> doImgProc::ap_const_lv64_2 = "10";
const sc_lv<64> doImgProc::ap_const_lv64_3 = "11";
const sc_lv<64> doImgProc::ap_const_lv64_4 = "100";
const sc_lv<64> doImgProc::ap_const_lv64_5 = "101";
const sc_lv<64> doImgProc::ap_const_lv64_6 = "110";
const sc_lv<64> doImgProc::ap_const_lv64_7 = "111";
const sc_lv<64> doImgProc::ap_const_lv64_8 = "1000";
const sc_lv<17> doImgProc::ap_const_lv17_12C01 = "10010110000000001";
const sc_lv<17> doImgProc::ap_const_lv17_F1 = "11110001";
const sc_lv<32> doImgProc::ap_const_lv32_1F = "11111";
const sc_lv<31> doImgProc::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> doImgProc::ap_const_lv32_EF = "11101111";
const sc_lv<32> doImgProc::ap_const_lv32_F = "1111";
const sc_lv<17> doImgProc::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> doImgProc::ap_const_lv32_10 = "10000";
const sc_lv<15> doImgProc::ap_const_lv15_0 = "000000000000000";
const sc_lv<32> doImgProc::ap_const_lv32_E = "1110";
const sc_lv<8> doImgProc::ap_const_lv8_F1 = "11110001";
const sc_lv<8> doImgProc::ap_const_lv8_1 = "1";
const sc_lv<8> doImgProc::ap_const_lv8_EF = "11101111";

doImgProc::doImgProc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    doImgProc_CRTL_BUS_s_axi_U = new doImgProc_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("doImgProc_CRTL_BUS_s_axi_U");
    doImgProc_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    doImgProc_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    doImgProc_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    doImgProc_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    doImgProc_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    doImgProc_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    doImgProc_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    doImgProc_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    doImgProc_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    doImgProc_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    doImgProc_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    doImgProc_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    doImgProc_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    doImgProc_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    doImgProc_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    doImgProc_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    doImgProc_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    doImgProc_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    doImgProc_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    doImgProc_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    doImgProc_CRTL_BUS_s_axi_U->ap_start(ap_start);
    doImgProc_CRTL_BUS_s_axi_U->interrupt(interrupt);
    doImgProc_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    doImgProc_CRTL_BUS_s_axi_U->ap_done(ap_done);
    doImgProc_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    doImgProc_CRTL_BUS_s_axi_U->operation(operation);
    doImgProc_KERNEL_BUS_s_axi_U = new doImgProc_KERNEL_BUS_s_axi<C_S_AXI_KERNEL_BUS_ADDR_WIDTH,C_S_AXI_KERNEL_BUS_DATA_WIDTH>("doImgProc_KERNEL_BUS_s_axi_U");
    doImgProc_KERNEL_BUS_s_axi_U->AWVALID(s_axi_KERNEL_BUS_AWVALID);
    doImgProc_KERNEL_BUS_s_axi_U->AWREADY(s_axi_KERNEL_BUS_AWREADY);
    doImgProc_KERNEL_BUS_s_axi_U->AWADDR(s_axi_KERNEL_BUS_AWADDR);
    doImgProc_KERNEL_BUS_s_axi_U->WVALID(s_axi_KERNEL_BUS_WVALID);
    doImgProc_KERNEL_BUS_s_axi_U->WREADY(s_axi_KERNEL_BUS_WREADY);
    doImgProc_KERNEL_BUS_s_axi_U->WDATA(s_axi_KERNEL_BUS_WDATA);
    doImgProc_KERNEL_BUS_s_axi_U->WSTRB(s_axi_KERNEL_BUS_WSTRB);
    doImgProc_KERNEL_BUS_s_axi_U->ARVALID(s_axi_KERNEL_BUS_ARVALID);
    doImgProc_KERNEL_BUS_s_axi_U->ARREADY(s_axi_KERNEL_BUS_ARREADY);
    doImgProc_KERNEL_BUS_s_axi_U->ARADDR(s_axi_KERNEL_BUS_ARADDR);
    doImgProc_KERNEL_BUS_s_axi_U->RVALID(s_axi_KERNEL_BUS_RVALID);
    doImgProc_KERNEL_BUS_s_axi_U->RREADY(s_axi_KERNEL_BUS_RREADY);
    doImgProc_KERNEL_BUS_s_axi_U->RDATA(s_axi_KERNEL_BUS_RDATA);
    doImgProc_KERNEL_BUS_s_axi_U->RRESP(s_axi_KERNEL_BUS_RRESP);
    doImgProc_KERNEL_BUS_s_axi_U->BVALID(s_axi_KERNEL_BUS_BVALID);
    doImgProc_KERNEL_BUS_s_axi_U->BREADY(s_axi_KERNEL_BUS_BREADY);
    doImgProc_KERNEL_BUS_s_axi_U->BRESP(s_axi_KERNEL_BUS_BRESP);
    doImgProc_KERNEL_BUS_s_axi_U->ACLK(ap_clk);
    doImgProc_KERNEL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    doImgProc_KERNEL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    doImgProc_KERNEL_BUS_s_axi_U->kernel_address0(kernel_address0);
    doImgProc_KERNEL_BUS_s_axi_U->kernel_ce0(kernel_ce0);
    doImgProc_KERNEL_BUS_s_axi_U->kernel_q0(kernel_q0);
    lineBuff_val_0_U = new doImgProc_lineBuff_val_0("lineBuff_val_0_U");
    lineBuff_val_0_U->clk(ap_clk);
    lineBuff_val_0_U->reset(ap_rst_n_inv);
    lineBuff_val_0_U->address0(lineBuff_val_0_address0);
    lineBuff_val_0_U->ce0(lineBuff_val_0_ce0);
    lineBuff_val_0_U->we0(lineBuff_val_0_we0);
    lineBuff_val_0_U->d0(lineBuff_val_1_q0);
    lineBuff_val_0_U->q0(lineBuff_val_0_q0);
    lineBuff_val_0_U->address1(lineBuff_val_0_address1);
    lineBuff_val_0_U->ce1(lineBuff_val_0_ce1);
    lineBuff_val_0_U->q1(lineBuff_val_0_q1);
    lineBuff_val_1_U = new doImgProc_lineBuff_val_0("lineBuff_val_1_U");
    lineBuff_val_1_U->clk(ap_clk);
    lineBuff_val_1_U->reset(ap_rst_n_inv);
    lineBuff_val_1_U->address0(lineBuff_val_1_address0);
    lineBuff_val_1_U->ce0(lineBuff_val_1_ce0);
    lineBuff_val_1_U->we0(lineBuff_val_1_we0);
    lineBuff_val_1_U->d0(lineBuff_val_2_q0);
    lineBuff_val_1_U->q0(lineBuff_val_1_q0);
    lineBuff_val_1_U->address1(lineBuff_val_1_address1);
    lineBuff_val_1_U->ce1(lineBuff_val_1_ce1);
    lineBuff_val_1_U->q1(lineBuff_val_1_q1);
    lineBuff_val_2_U = new doImgProc_lineBuff_val_0("lineBuff_val_2_U");
    lineBuff_val_2_U->clk(ap_clk);
    lineBuff_val_2_U->reset(ap_rst_n_inv);
    lineBuff_val_2_U->address0(lineBuff_val_2_address0);
    lineBuff_val_2_U->ce0(lineBuff_val_2_ce0);
    lineBuff_val_2_U->we0(lineBuff_val_2_we0);
    lineBuff_val_2_U->d0(inStream_V_data_V_0_data_out);
    lineBuff_val_2_U->q0(lineBuff_val_2_q0);
    lineBuff_val_2_U->address1(lineBuff_val_2_address1);
    lineBuff_val_2_U->ce1(lineBuff_val_2_ce1);
    lineBuff_val_2_U->q1(lineBuff_val_2_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_01001);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_11001);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_11001);

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);

    SC_METHOD(thread_ap_block_pp0_stage8);

    SC_METHOD(thread_ap_block_pp0_stage8_11001);

    SC_METHOD(thread_ap_block_pp0_stage8_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage8_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state13_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state14_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state15_pp0_stage4_iter1);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state16_pp0_stage5_iter1);

    SC_METHOD(thread_ap_block_state18);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state18_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( exitcond_fu_1252_p2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( exitcond1_reg_1331 );

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage7_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond1_fu_565_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_col_assign_phi_fu_480_p4);
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( col_assign_reg_476 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( idxCol_1_reg_1583 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_countWait_phi_fu_516_p4);
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( countWait_reg_512 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( phitmp_reg_1588 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_idxRow_phi_fu_492_p4);
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( idxRow_reg_488 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( idxRow_1_reg_1677 );

    SC_METHOD(thread_ap_phi_mux_pixConvolved_phi_fu_504_p4);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( pixConvolved_reg_500 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( pixConvolved_2_reg_1642 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_col_assign_1_0_2_fu_642_p2);
    sensitive << ( pixConvolved_reg_500 );

    SC_METHOD(thread_countWait_2_fu_1258_p2);
    sensitive << ( countWait_1_reg_524 );

    SC_METHOD(thread_dataOutSideChannel_d_1_fu_1245_p3);
    sensitive << ( sel_tmp9_reg_1637 );
    sensitive << ( sel_tmp10_reg_1657 );
    sensitive << ( p_s_fu_1237_p3 );

    SC_METHOD(thread_exitcond1_fu_565_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_countWait_phi_fu_516_p4 );

    SC_METHOD(thread_exitcond_fu_1252_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_block_state18_io );
    sensitive << ( countWait_1_reg_524 );

    SC_METHOD(thread_icmp4_fu_699_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( tmp_2_fu_689_p4 );

    SC_METHOD(thread_icmp_fu_683_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( tmp_1_fu_673_p4 );

    SC_METHOD(thread_idxCol_1_fu_940_p3);
    sensitive << ( tmp_11_fu_928_p2 );
    sensitive << ( idxCol_fu_934_p2 );

    SC_METHOD(thread_idxCol_fu_934_p2);
    sensitive << ( col_assign_reg_476 );

    SC_METHOD(thread_idxRow_1_fu_1195_p3);
    sensitive << ( idxRow_reg_488 );
    sensitive << ( tmp_11_reg_1577 );
    sensitive << ( idxRow_2_fu_1189_p2 );

    SC_METHOD(thread_idxRow_2_fu_1189_p2);
    sensitive << ( idxRow_reg_488 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( inStream_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( exitcond1_reg_1331 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_in);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_data_V_0_data_out);
    sensitive << ( inStream_V_data_V_0_payload_A );
    sensitive << ( inStream_V_data_V_0_payload_B );
    sensitive << ( inStream_V_data_V_0_sel );

    SC_METHOD(thread_inStream_V_data_V_0_load_A);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_load_B);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_sel);
    sensitive << ( inStream_V_data_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_data_V_0_state_cmp_full);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_data_V_0_vld_out);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_in);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_dest_V_0_data_out);
    sensitive << ( inStream_V_dest_V_0_payload_A );
    sensitive << ( inStream_V_dest_V_0_payload_B );
    sensitive << ( inStream_V_dest_V_0_sel );

    SC_METHOD(thread_inStream_V_dest_V_0_load_A);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_load_B);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_sel);
    sensitive << ( inStream_V_dest_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_dest_V_0_state_cmp_full);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_out);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_in);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_id_V_0_data_out);
    sensitive << ( inStream_V_id_V_0_payload_A );
    sensitive << ( inStream_V_id_V_0_payload_B );
    sensitive << ( inStream_V_id_V_0_sel );

    SC_METHOD(thread_inStream_V_id_V_0_load_A);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_load_B);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_sel);
    sensitive << ( inStream_V_id_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_id_V_0_state_cmp_full);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_id_V_0_vld_out);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_in);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_keep_V_0_data_out);
    sensitive << ( inStream_V_keep_V_0_payload_A );
    sensitive << ( inStream_V_keep_V_0_payload_B );
    sensitive << ( inStream_V_keep_V_0_sel );

    SC_METHOD(thread_inStream_V_keep_V_0_load_A);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_load_B);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_sel);
    sensitive << ( inStream_V_keep_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_keep_V_0_state_cmp_full);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_out);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_in);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_strb_V_0_data_out);
    sensitive << ( inStream_V_strb_V_0_payload_A );
    sensitive << ( inStream_V_strb_V_0_payload_B );
    sensitive << ( inStream_V_strb_V_0_sel );

    SC_METHOD(thread_inStream_V_strb_V_0_load_A);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_load_B);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_sel);
    sensitive << ( inStream_V_strb_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_strb_V_0_state_cmp_full);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_out);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_in);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_inStream_V_user_V_0_data_out);
    sensitive << ( inStream_V_user_V_0_payload_A );
    sensitive << ( inStream_V_user_V_0_payload_B );
    sensitive << ( inStream_V_user_V_0_sel );

    SC_METHOD(thread_inStream_V_user_V_0_load_A);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_load_B);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_sel);
    sensitive << ( inStream_V_user_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_user_V_0_state_cmp_full);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_user_V_0_vld_out);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage8 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_lineBuff_val_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( tmp_s_reg_1335 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_5_fu_608_p1 );

    SC_METHOD(thread_lineBuff_val_0_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_27_0_1_fu_621_p1 );
    sensitive << ( tmp_27_0_2_fu_648_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_lineBuff_val_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_0_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_0_we0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_571_p1 );
    sensitive << ( lineBuff_val_1_addr_reg_1340 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_5_fu_608_p1 );

    SC_METHOD(thread_lineBuff_val_1_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_27_0_1_fu_621_p1 );
    sensitive << ( tmp_27_0_2_fu_648_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_lineBuff_val_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_lineBuff_val_1_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_1_we0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_571_p1 );
    sensitive << ( lineBuff_val_2_addr_reg_1345 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_5_fu_608_p1 );

    SC_METHOD(thread_lineBuff_val_2_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_27_0_1_fu_621_p1 );
    sensitive << ( tmp_27_0_2_fu_648_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_lineBuff_val_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_lineBuff_val_2_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_2_we0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_or_cond_fu_705_p2);
    sensitive << ( icmp_fu_683_p2 );
    sensitive << ( icmp4_fu_699_p2 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( outStream_V_data_V_1_data_out );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( outStream_V_dest_V_1_data_out );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( outStream_V_id_V_1_data_out );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( outStream_V_keep_V_1_data_out );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( outStream_V_last_V_1_data_out );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( outStream_V_strb_V_1_data_out );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( outStream_V_user_V_1_data_out );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_in);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_data_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_d_1_fu_1245_p3 );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_data_V_1_data_out);
    sensitive << ( outStream_V_data_V_1_payload_A );
    sensitive << ( outStream_V_data_V_1_payload_B );
    sensitive << ( outStream_V_data_V_1_sel );

    SC_METHOD(thread_outStream_V_data_V_1_load_A);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_load_B);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_sel);
    sensitive << ( outStream_V_data_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_data_V_1_state_cmp_full);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_data_V_1_vld_out);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_in);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_dest_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_d_reg_463 );
    sensitive << ( tmp_dest_V_reg_1378_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_dest_V_1_data_out);
    sensitive << ( outStream_V_dest_V_1_payload_A );
    sensitive << ( outStream_V_dest_V_1_payload_B );
    sensitive << ( outStream_V_dest_V_1_sel );

    SC_METHOD(thread_outStream_V_dest_V_1_load_A);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_load_B);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_sel);
    sensitive << ( outStream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_dest_V_1_state_cmp_full);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_out);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_in);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_id_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_i_reg_411 );
    sensitive << ( tmp_id_V_reg_1372_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_id_V_1_data_out);
    sensitive << ( outStream_V_id_V_1_payload_A );
    sensitive << ( outStream_V_id_V_1_payload_B );
    sensitive << ( outStream_V_id_V_1_sel );

    SC_METHOD(thread_outStream_V_id_V_1_load_A);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_load_B);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_sel);
    sensitive << ( outStream_V_id_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_id_V_1_state_cmp_full);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_id_V_1_vld_out);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_in);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_keep_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_k_reg_450 );
    sensitive << ( tmp_keep_V_reg_1354_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_keep_V_1_data_out);
    sensitive << ( outStream_V_keep_V_1_payload_A );
    sensitive << ( outStream_V_keep_V_1_payload_B );
    sensitive << ( outStream_V_keep_V_1_sel );

    SC_METHOD(thread_outStream_V_keep_V_1_load_A);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_load_B);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_sel);
    sensitive << ( outStream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_keep_V_1_state_cmp_full);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_out);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_in);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_last_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( tmp_last_V_fu_1264_p2 );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_last_V_1_data_out);
    sensitive << ( outStream_V_last_V_1_payload_A );
    sensitive << ( outStream_V_last_V_1_payload_B );
    sensitive << ( outStream_V_last_V_1_sel );

    SC_METHOD(thread_outStream_V_last_V_1_load_A);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_load_B);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_sel);
    sensitive << ( outStream_V_last_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_last_V_1_state_cmp_full);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_last_V_1_vld_out);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_in);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_strb_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_s_reg_437 );
    sensitive << ( tmp_strb_V_reg_1360_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_strb_V_1_data_out);
    sensitive << ( outStream_V_strb_V_1_payload_A );
    sensitive << ( outStream_V_strb_V_1_payload_B );
    sensitive << ( outStream_V_strb_V_1_sel );

    SC_METHOD(thread_outStream_V_strb_V_1_load_A);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_load_B);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_sel);
    sensitive << ( outStream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_strb_V_1_state_cmp_full);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_out);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_in);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_user_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( dataOutSideChannel_u_reg_424 );
    sensitive << ( tmp_user_V_reg_1366_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage4_01001 );

    SC_METHOD(thread_outStream_V_user_V_1_data_out);
    sensitive << ( outStream_V_user_V_1_payload_A );
    sensitive << ( outStream_V_user_V_1_payload_B );
    sensitive << ( outStream_V_user_V_1_sel );

    SC_METHOD(thread_outStream_V_user_V_1_load_A);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_load_B);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_sel);
    sensitive << ( outStream_V_user_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_user_V_1_state_cmp_full);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_1350_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_outStream_V_user_V_1_vld_out);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_p_neg_fu_1163_p2);
    sensitive << ( tmp_20_tr_fu_1151_p1 );

    SC_METHOD(thread_p_s_fu_1237_p3);
    sensitive << ( tmp_13_fu_1229_p3 );
    sensitive << ( tmp_10_fu_1225_p1 );

    SC_METHOD(thread_phitmp_fu_948_p2);
    sensitive << ( countWait_reg_512 );

    SC_METHOD(thread_pixConvolved_1_fu_1055_p3);
    sensitive << ( pixConvolved_3_reg_1389 );
    sensitive << ( sel_tmp9_fu_1051_p2 );
    sensitive << ( sel_tmp7_fu_1045_p3 );

    SC_METHOD(thread_pixConvolved_2_fu_1062_p3);
    sensitive << ( tmp_11_reg_1577 );
    sensitive << ( pixConvolved_1_fu_1055_p3 );

    SC_METHOD(thread_pixConvolved_3_fu_615_p2);
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_504_p4 );

    SC_METHOD(thread_sel_tmp10_fu_1135_p3);
    sensitive << ( sel_tmp6_reg_1632 );
    sensitive << ( valInWindow_0_minVal_7_fu_1109_p3 );
    sensitive << ( sel_tmp_fu_1128_p3 );

    SC_METHOD(thread_sel_tmp1_fu_720_p3);
    sensitive << ( pixConvolved_reg_500 );
    sensitive << ( pixConvolved_3_reg_1389 );
    sensitive << ( or_cond_fu_705_p2 );

    SC_METHOD(thread_sel_tmp2_fu_547_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( operation );

    SC_METHOD(thread_sel_tmp3_fu_727_p2);
    sensitive << ( sel_tmp2_reg_1316 );
    sensitive << ( or_cond_fu_705_p2 );

    SC_METHOD(thread_sel_tmp4_fu_732_p3);
    sensitive << ( pixConvolved_3_reg_1389 );
    sensitive << ( sel_tmp3_fu_727_p2 );
    sensitive << ( sel_tmp1_fu_720_p3 );

    SC_METHOD(thread_sel_tmp5_fu_553_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( operation );

    SC_METHOD(thread_sel_tmp6_fu_1041_p2);
    sensitive << ( sel_tmp5_reg_1321 );
    sensitive << ( or_cond_reg_1480 );

    SC_METHOD(thread_sel_tmp7_fu_1045_p3);
    sensitive << ( pixConvolved_3_reg_1389 );
    sensitive << ( sel_tmp4_reg_1504 );
    sensitive << ( sel_tmp6_fu_1041_p2 );

    SC_METHOD(thread_sel_tmp8_fu_559_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( operation );

    SC_METHOD(thread_sel_tmp9_fu_1051_p2);
    sensitive << ( sel_tmp8_reg_1326 );
    sensitive << ( or_cond_reg_1480 );

    SC_METHOD(thread_sel_tmp_fu_1128_p3);
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_7_fu_1121_p3 );

    SC_METHOD(thread_tmp1_fu_1008_p2);
    sensitive << ( window_val_2_0_reg_1593 );
    sensitive << ( window_val_2_1_fu_1002_p2 );

    SC_METHOD(thread_tmp2_fu_1081_p2);
    sensitive << ( window_val_1_1_reg_1543 );
    sensitive << ( window_val_1_2_reg_1560 );

    SC_METHOD(thread_tmp3_fu_1085_p2);
    sensitive << ( tmp1_reg_1615 );
    sensitive << ( tmp2_fu_1081_p2 );

    SC_METHOD(thread_tmp4_fu_711_p2);
    sensitive << ( window_val_0_0_reg_1422 );
    sensitive << ( window_val_0_1_fu_667_p2 );

    SC_METHOD(thread_tmp5_fu_1090_p2);
    sensitive << ( window_val_0_2_reg_1509 );
    sensitive << ( window_val_2_2_fu_1075_p2 );

    SC_METHOD(thread_tmp6_fu_1095_p2);
    sensitive << ( window_val_1_0_reg_1526 );
    sensitive << ( tmp5_fu_1090_p2 );

    SC_METHOD(thread_tmp7_fu_1142_p2);
    sensitive << ( tmp4_reg_1486 );
    sensitive << ( tmp6_reg_1652 );

    SC_METHOD(thread_tmp_10_cast_fu_1214_p1);
    sensitive << ( tmp_8_fu_1205_p1 );

    SC_METHOD(thread_tmp_10_fu_1225_p1);
    sensitive << ( valOutput_1_fu_1218_p3 );

    SC_METHOD(thread_tmp_11_0_1_i_fu_781_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( tmp_14_reg_1462 );
    sensitive << ( tmp_15_reg_1491 );
    sensitive << ( sel_tmp3_reg_1499 );

    SC_METHOD(thread_tmp_11_0_2_i_fu_791_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( tmp_16_fu_763_p1 );
    sensitive << ( valInWindow_0_maxVal_fu_785_p3 );

    SC_METHOD(thread_tmp_11_1_1_i_fu_875_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_2_reg_1537 );
    sensitive << ( tmp_18_fu_859_p1 );

    SC_METHOD(thread_tmp_11_1_2_i_fu_916_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8_11001 );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_3_reg_1554 );
    sensitive << ( tmp_19_fu_900_p1 );

    SC_METHOD(thread_tmp_11_1_i_fu_834_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_1_reg_1520 );
    sensitive << ( tmp_17_fu_818_p1 );

    SC_METHOD(thread_tmp_11_2_1_i_fu_1029_p2);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_5_reg_1609 );
    sensitive << ( tmp_21_fu_1013_p1 );

    SC_METHOD(thread_tmp_11_2_2_i_fu_1116_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_6_reg_1626 );
    sensitive << ( sel_tmp6_reg_1632 );
    sensitive << ( sel_tmp9_reg_1637 );
    sensitive << ( tmp_22_fu_1100_p1 );

    SC_METHOD(thread_tmp_11_2_i_fu_983_p2);
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( sel_tmp3_reg_1499 );
    sensitive << ( valInWindow_0_maxVal_4_reg_1571 );
    sensitive << ( tmp_20_fu_967_p1 );

    SC_METHOD(thread_tmp_11_fu_928_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( col_assign_reg_476 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8_11001 );

    SC_METHOD(thread_tmp_12_fu_577_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_565_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_countWait_phi_fu_516_p4 );

    SC_METHOD(thread_tmp_13_fu_1229_p3);
    sensitive << ( valOutput_1_fu_1218_p3 );

    SC_METHOD(thread_tmp_14_fu_655_p1);
    sensitive << ( window_val_0_0_fu_636_p2 );

    SC_METHOD(thread_tmp_15_fu_716_p1);
    sensitive << ( window_val_0_1_fu_667_p2 );

    SC_METHOD(thread_tmp_16_fu_763_p1);
    sensitive << ( window_val_0_2_fu_747_p2 );

    SC_METHOD(thread_tmp_17_fu_818_p1);
    sensitive << ( window_val_1_0_fu_812_p2 );

    SC_METHOD(thread_tmp_18_fu_859_p1);
    sensitive << ( window_val_1_1_fu_853_p2 );

    SC_METHOD(thread_tmp_19_fu_900_p1);
    sensitive << ( window_val_1_2_fu_894_p2 );

    SC_METHOD(thread_tmp_1_fu_673_p4);
    sensitive << ( ap_phi_mux_idxRow_phi_fu_492_p4 );

    SC_METHOD(thread_tmp_20_fu_967_p1);
    sensitive << ( window_val_2_0_fu_961_p2 );

    SC_METHOD(thread_tmp_20_tr_fu_1151_p1);
    sensitive << ( valOutput_fu_1146_p2 );

    SC_METHOD(thread_tmp_21_fu_1013_p1);
    sensitive << ( window_val_2_1_fu_1002_p2 );

    SC_METHOD(thread_tmp_22_fu_1100_p1);
    sensitive << ( window_val_2_2_fu_1075_p2 );

    SC_METHOD(thread_tmp_27_0_1_fu_621_p1);
    sensitive << ( pixConvolved_3_fu_615_p2 );

    SC_METHOD(thread_tmp_27_0_2_fu_648_p1);
    sensitive << ( col_assign_1_0_2_fu_642_p2 );

    SC_METHOD(thread_tmp_2_fu_689_p4);
    sensitive << ( col_assign_reg_476 );

    SC_METHOD(thread_tmp_5_0_1_i_fu_753_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( tmp_14_reg_1462 );
    sensitive << ( tmp_15_reg_1491 );

    SC_METHOD(thread_tmp_5_0_2_i_fu_767_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( tmp_16_fu_763_p1 );
    sensitive << ( valInWindow_0_minVal_fu_757_p3 );

    SC_METHOD(thread_tmp_5_1_1_i_fu_863_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( valInWindow_0_minVal_2_reg_1531 );
    sensitive << ( tmp_18_fu_859_p1 );

    SC_METHOD(thread_tmp_5_1_2_i_fu_904_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8_11001 );
    sensitive << ( valInWindow_0_minVal_3_reg_1548 );
    sensitive << ( tmp_19_fu_900_p1 );

    SC_METHOD(thread_tmp_5_1_i_fu_822_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( valInWindow_0_minVal_1_reg_1514 );
    sensitive << ( tmp_17_fu_818_p1 );

    SC_METHOD(thread_tmp_5_2_1_i_fu_1017_p2);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( valInWindow_0_minVal_5_reg_1603 );
    sensitive << ( tmp_21_fu_1013_p1 );

    SC_METHOD(thread_tmp_5_2_2_i_fu_1104_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( exitcond1_reg_1331_pp0_iter1_reg );
    sensitive << ( valInWindow_0_minVal_6_reg_1620 );
    sensitive << ( sel_tmp6_reg_1632 );
    sensitive << ( sel_tmp9_reg_1637 );
    sensitive << ( tmp_22_fu_1100_p1 );

    SC_METHOD(thread_tmp_5_2_i_fu_971_p2);
    sensitive << ( exitcond1_reg_1331 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( valInWindow_0_minVal_4_reg_1565 );
    sensitive << ( tmp_20_fu_967_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_1202_p1);
    sensitive << ( tmp_6_reg_1667 );

    SC_METHOD(thread_tmp_5_fu_608_p1);
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_504_p4 );

    SC_METHOD(thread_tmp_8_fu_1205_p1);
    sensitive << ( tmp_7_reg_1672 );

    SC_METHOD(thread_tmp_9_fu_1208_p2);
    sensitive << ( tmp_5_cast_fu_1202_p1 );

    SC_METHOD(thread_tmp_last_V_fu_1264_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_block_state18_io );
    sensitive << ( countWait_1_reg_524 );

    SC_METHOD(thread_tmp_s_fu_571_p1);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_480_p4 );

    SC_METHOD(thread_valInWindow_0_maxVal_1_fu_797_p3);
    sensitive << ( tmp_16_fu_763_p1 );
    sensitive << ( valInWindow_0_maxVal_fu_785_p3 );
    sensitive << ( tmp_11_0_2_i_fu_791_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_2_fu_839_p3);
    sensitive << ( valInWindow_0_maxVal_1_reg_1520 );
    sensitive << ( tmp_17_fu_818_p1 );
    sensitive << ( tmp_11_1_i_fu_834_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_3_fu_880_p3);
    sensitive << ( valInWindow_0_maxVal_2_reg_1537 );
    sensitive << ( tmp_18_fu_859_p1 );
    sensitive << ( tmp_11_1_1_i_fu_875_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_4_fu_921_p3);
    sensitive << ( valInWindow_0_maxVal_3_reg_1554 );
    sensitive << ( tmp_19_fu_900_p1 );
    sensitive << ( tmp_11_1_2_i_fu_916_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_5_fu_988_p3);
    sensitive << ( valInWindow_0_maxVal_4_reg_1571 );
    sensitive << ( tmp_20_fu_967_p1 );
    sensitive << ( tmp_11_2_i_fu_983_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_6_fu_1034_p3);
    sensitive << ( valInWindow_0_maxVal_5_reg_1609 );
    sensitive << ( tmp_21_fu_1013_p1 );
    sensitive << ( tmp_11_2_1_i_fu_1029_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_7_fu_1121_p3);
    sensitive << ( valInWindow_0_maxVal_6_reg_1626 );
    sensitive << ( tmp_22_fu_1100_p1 );
    sensitive << ( tmp_11_2_2_i_fu_1116_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_fu_785_p3);
    sensitive << ( tmp_14_reg_1462 );
    sensitive << ( tmp_15_reg_1491 );
    sensitive << ( tmp_11_0_1_i_fu_781_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_1_fu_773_p3);
    sensitive << ( tmp_16_fu_763_p1 );
    sensitive << ( valInWindow_0_minVal_fu_757_p3 );
    sensitive << ( tmp_5_0_2_i_fu_767_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_2_fu_827_p3);
    sensitive << ( valInWindow_0_minVal_1_reg_1514 );
    sensitive << ( tmp_17_fu_818_p1 );
    sensitive << ( tmp_5_1_i_fu_822_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_3_fu_868_p3);
    sensitive << ( valInWindow_0_minVal_2_reg_1531 );
    sensitive << ( tmp_18_fu_859_p1 );
    sensitive << ( tmp_5_1_1_i_fu_863_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_4_fu_909_p3);
    sensitive << ( valInWindow_0_minVal_3_reg_1548 );
    sensitive << ( tmp_19_fu_900_p1 );
    sensitive << ( tmp_5_1_2_i_fu_904_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_5_fu_976_p3);
    sensitive << ( valInWindow_0_minVal_4_reg_1565 );
    sensitive << ( tmp_20_fu_967_p1 );
    sensitive << ( tmp_5_2_i_fu_971_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_6_fu_1022_p3);
    sensitive << ( valInWindow_0_minVal_5_reg_1603 );
    sensitive << ( tmp_21_fu_1013_p1 );
    sensitive << ( tmp_5_2_1_i_fu_1017_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_7_fu_1109_p3);
    sensitive << ( valInWindow_0_minVal_6_reg_1620 );
    sensitive << ( tmp_22_fu_1100_p1 );
    sensitive << ( tmp_5_2_2_i_fu_1104_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_fu_757_p3);
    sensitive << ( tmp_14_reg_1462 );
    sensitive << ( tmp_15_reg_1491 );
    sensitive << ( tmp_5_0_1_i_fu_753_p2 );

    SC_METHOD(thread_valOutput_1_fu_1218_p3);
    sensitive << ( tmp_4_reg_1662 );
    sensitive << ( tmp_9_fu_1208_p2 );
    sensitive << ( tmp_10_cast_fu_1214_p1 );

    SC_METHOD(thread_valOutput_fu_1146_p2);
    sensitive << ( tmp3_reg_1647 );
    sensitive << ( tmp7_fu_1142_p2 );

    SC_METHOD(thread_window_val_0_0_fu_636_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( reg_535 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_window_val_0_0_fu_636_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( window_val_0_0_fu_636_p10 );

    SC_METHOD(thread_window_val_0_0_fu_636_p10);
    sensitive << ( lineBuff_val_0_q0 );

    SC_METHOD(thread_window_val_0_0_fu_636_p2);
    sensitive << ( window_val_0_0_fu_636_p0 );
    sensitive << ( window_val_0_0_fu_636_p1 );

    SC_METHOD(thread_window_val_0_1_fu_667_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( reg_539 );

    SC_METHOD(thread_window_val_0_1_fu_667_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( window_val_0_1_fu_667_p10 );

    SC_METHOD(thread_window_val_0_1_fu_667_p10);
    sensitive << ( reg_543 );

    SC_METHOD(thread_window_val_0_1_fu_667_p2);
    sensitive << ( window_val_0_1_fu_667_p0 );
    sensitive << ( window_val_0_1_fu_667_p1 );

    SC_METHOD(thread_window_val_0_2_fu_747_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( reg_535 );

    SC_METHOD(thread_window_val_0_2_fu_747_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( window_val_0_2_fu_747_p10 );

    SC_METHOD(thread_window_val_0_2_fu_747_p10);
    sensitive << ( reg_543 );

    SC_METHOD(thread_window_val_0_2_fu_747_p2);
    sensitive << ( window_val_0_2_fu_747_p0 );
    sensitive << ( window_val_0_2_fu_747_p1 );

    SC_METHOD(thread_window_val_1_0_fu_812_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( reg_539 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_window_val_1_0_fu_812_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( window_val_1_0_fu_812_p10 );

    SC_METHOD(thread_window_val_1_0_fu_812_p10);
    sensitive << ( lineBuff_val_1_load_1_reg_1432 );

    SC_METHOD(thread_window_val_1_0_fu_812_p2);
    sensitive << ( window_val_1_0_fu_812_p0 );
    sensitive << ( window_val_1_0_fu_812_p1 );

    SC_METHOD(thread_window_val_1_1_fu_853_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( reg_535 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );

    SC_METHOD(thread_window_val_1_1_fu_853_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( window_val_1_1_fu_853_p10 );

    SC_METHOD(thread_window_val_1_1_fu_853_p10);
    sensitive << ( lineBuff_val_1_load_2_reg_1437 );

    SC_METHOD(thread_window_val_1_1_fu_853_p2);
    sensitive << ( window_val_1_1_fu_853_p0 );
    sensitive << ( window_val_1_1_fu_853_p1 );

    SC_METHOD(thread_window_val_1_2_fu_894_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( reg_539 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8 );

    SC_METHOD(thread_window_val_1_2_fu_894_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8 );
    sensitive << ( window_val_1_2_fu_894_p10 );

    SC_METHOD(thread_window_val_1_2_fu_894_p10);
    sensitive << ( lineBuff_val_1_load_3_reg_1470 );

    SC_METHOD(thread_window_val_1_2_fu_894_p2);
    sensitive << ( window_val_1_2_fu_894_p0 );
    sensitive << ( window_val_1_2_fu_894_p1 );

    SC_METHOD(thread_window_val_2_0_fu_961_p0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( reg_535 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_window_val_2_0_fu_961_p1);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( window_val_2_0_fu_961_p10 );

    SC_METHOD(thread_window_val_2_0_fu_961_p10);
    sensitive << ( lineBuff_val_2_load_1_reg_1447 );

    SC_METHOD(thread_window_val_2_0_fu_961_p2);
    sensitive << ( window_val_2_0_fu_961_p0 );
    sensitive << ( window_val_2_0_fu_961_p1 );

    SC_METHOD(thread_window_val_2_1_fu_1002_p0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( reg_539 );

    SC_METHOD(thread_window_val_2_1_fu_1002_p1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( window_val_2_1_fu_1002_p10 );

    SC_METHOD(thread_window_val_2_1_fu_1002_p10);
    sensitive << ( lineBuff_val_2_load_2_reg_1452 );

    SC_METHOD(thread_window_val_2_1_fu_1002_p2);
    sensitive << ( window_val_2_1_fu_1002_p0 );
    sensitive << ( window_val_2_1_fu_1002_p1 );

    SC_METHOD(thread_window_val_2_2_fu_1075_p0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( kernel_load_8_reg_1598 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_window_val_2_2_fu_1075_p1);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( window_val_2_2_fu_1075_p10 );

    SC_METHOD(thread_window_val_2_2_fu_1075_p10);
    sensitive << ( lineBuff_val_2_load_3_reg_1475 );

    SC_METHOD(thread_window_val_2_2_fu_1075_p2);
    sensitive << ( window_val_2_2_fu_1075_p0 );
    sensitive << ( window_val_2_2_fu_1075_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_1252_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond1_fu_565_p2 );
    sensitive << ( ap_block_state18_io );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage8_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000001";
    inStream_V_data_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_data_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_data_V_0_state = "00";
    inStream_V_keep_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_keep_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_keep_V_0_state = "00";
    inStream_V_strb_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_strb_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_strb_V_0_state = "00";
    inStream_V_user_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_user_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_user_V_0_state = "00";
    inStream_V_id_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_id_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_id_V_0_state = "00";
    inStream_V_dest_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_dest_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_dest_V_0_state = "00";
    outStream_V_data_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_data_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_data_V_1_state = "00";
    outStream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_keep_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_keep_V_1_state = "00";
    outStream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_strb_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_strb_V_1_state = "00";
    outStream_V_user_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_user_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_user_V_1_state = "00";
    outStream_V_last_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_last_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_last_V_1_state = "00";
    outStream_V_id_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_id_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_id_V_1_state = "00";
    outStream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_dest_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "doImgProc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWVALID, "(port)s_axi_KERNEL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWREADY, "(port)s_axi_KERNEL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWADDR, "(port)s_axi_KERNEL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WVALID, "(port)s_axi_KERNEL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WREADY, "(port)s_axi_KERNEL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WDATA, "(port)s_axi_KERNEL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WSTRB, "(port)s_axi_KERNEL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARVALID, "(port)s_axi_KERNEL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARREADY, "(port)s_axi_KERNEL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARADDR, "(port)s_axi_KERNEL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RVALID, "(port)s_axi_KERNEL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RREADY, "(port)s_axi_KERNEL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RDATA, "(port)s_axi_KERNEL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RRESP, "(port)s_axi_KERNEL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BVALID, "(port)s_axi_KERNEL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BREADY, "(port)s_axi_KERNEL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BRESP, "(port)s_axi_KERNEL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inStream_V_data_V_0_data_out, "inStream_V_data_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_in, "inStream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_out, "inStream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_in, "inStream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_out, "inStream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_A, "inStream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_B, "inStream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_rd, "inStream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_wr, "inStream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel, "inStream_V_data_V_0_sel");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_A, "inStream_V_data_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_B, "inStream_V_data_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_state, "inStream_V_data_V_0_state");
    sc_trace(mVcdFile, inStream_V_data_V_0_state_cmp_full, "inStream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_keep_V_0_data_out, "inStream_V_keep_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_in, "inStream_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_out, "inStream_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_in, "inStream_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_out, "inStream_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_A, "inStream_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_B, "inStream_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_rd, "inStream_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_wr, "inStream_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel, "inStream_V_keep_V_0_sel");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_A, "inStream_V_keep_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_B, "inStream_V_keep_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state, "inStream_V_keep_V_0_state");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state_cmp_full, "inStream_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_strb_V_0_data_out, "inStream_V_strb_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_in, "inStream_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_out, "inStream_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_in, "inStream_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_out, "inStream_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_A, "inStream_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_B, "inStream_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_rd, "inStream_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_wr, "inStream_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel, "inStream_V_strb_V_0_sel");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_A, "inStream_V_strb_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_B, "inStream_V_strb_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state, "inStream_V_strb_V_0_state");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state_cmp_full, "inStream_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_user_V_0_data_out, "inStream_V_user_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_in, "inStream_V_user_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_out, "inStream_V_user_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_in, "inStream_V_user_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_out, "inStream_V_user_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_A, "inStream_V_user_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_B, "inStream_V_user_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_rd, "inStream_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_wr, "inStream_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel, "inStream_V_user_V_0_sel");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_A, "inStream_V_user_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_B, "inStream_V_user_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_state, "inStream_V_user_V_0_state");
    sc_trace(mVcdFile, inStream_V_user_V_0_state_cmp_full, "inStream_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_id_V_0_data_out, "inStream_V_id_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_in, "inStream_V_id_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_out, "inStream_V_id_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_in, "inStream_V_id_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_out, "inStream_V_id_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_A, "inStream_V_id_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_B, "inStream_V_id_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_rd, "inStream_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_wr, "inStream_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel, "inStream_V_id_V_0_sel");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_A, "inStream_V_id_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_B, "inStream_V_id_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_state, "inStream_V_id_V_0_state");
    sc_trace(mVcdFile, inStream_V_id_V_0_state_cmp_full, "inStream_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_dest_V_0_data_out, "inStream_V_dest_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_in, "inStream_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_out, "inStream_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_in, "inStream_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_out, "inStream_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_A, "inStream_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_B, "inStream_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_rd, "inStream_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_wr, "inStream_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel, "inStream_V_dest_V_0_sel");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_A, "inStream_V_dest_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_B, "inStream_V_dest_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state, "inStream_V_dest_V_0_state");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state_cmp_full, "inStream_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_in, "outStream_V_data_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_out, "outStream_V_data_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_in, "outStream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_out, "outStream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_in, "outStream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_out, "outStream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_A, "outStream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_B, "outStream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_rd, "outStream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_wr, "outStream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel, "outStream_V_data_V_1_sel");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_A, "outStream_V_data_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_B, "outStream_V_data_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_state, "outStream_V_data_V_1_state");
    sc_trace(mVcdFile, outStream_V_data_V_1_state_cmp_full, "outStream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_in, "outStream_V_keep_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_out, "outStream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_in, "outStream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_out, "outStream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_in, "outStream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_out, "outStream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_A, "outStream_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_B, "outStream_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_rd, "outStream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_wr, "outStream_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel, "outStream_V_keep_V_1_sel");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_A, "outStream_V_keep_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_B, "outStream_V_keep_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state, "outStream_V_keep_V_1_state");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state_cmp_full, "outStream_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_in, "outStream_V_strb_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_out, "outStream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_in, "outStream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_out, "outStream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_in, "outStream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_out, "outStream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_A, "outStream_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_B, "outStream_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_rd, "outStream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_wr, "outStream_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel, "outStream_V_strb_V_1_sel");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_A, "outStream_V_strb_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_B, "outStream_V_strb_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state, "outStream_V_strb_V_1_state");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state_cmp_full, "outStream_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_in, "outStream_V_user_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_out, "outStream_V_user_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_in, "outStream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_out, "outStream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_in, "outStream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_out, "outStream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_A, "outStream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_B, "outStream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_rd, "outStream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_wr, "outStream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel, "outStream_V_user_V_1_sel");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_A, "outStream_V_user_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_B, "outStream_V_user_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_state, "outStream_V_user_V_1_state");
    sc_trace(mVcdFile, outStream_V_user_V_1_state_cmp_full, "outStream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_in, "outStream_V_last_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_out, "outStream_V_last_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_in, "outStream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_out, "outStream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_in, "outStream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_out, "outStream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_A, "outStream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_B, "outStream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_rd, "outStream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_wr, "outStream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel, "outStream_V_last_V_1_sel");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_A, "outStream_V_last_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_B, "outStream_V_last_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_state, "outStream_V_last_V_1_state");
    sc_trace(mVcdFile, outStream_V_last_V_1_state_cmp_full, "outStream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_in, "outStream_V_id_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_out, "outStream_V_id_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_in, "outStream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_out, "outStream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_in, "outStream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_out, "outStream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_A, "outStream_V_id_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_B, "outStream_V_id_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_rd, "outStream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_wr, "outStream_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel, "outStream_V_id_V_1_sel");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_A, "outStream_V_id_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_B, "outStream_V_id_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_state, "outStream_V_id_V_1_state");
    sc_trace(mVcdFile, outStream_V_id_V_1_state_cmp_full, "outStream_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_in, "outStream_V_dest_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_out, "outStream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_in, "outStream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_out, "outStream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_in, "outStream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_out, "outStream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_A, "outStream_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_B, "outStream_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_rd, "outStream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_wr, "outStream_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel, "outStream_V_dest_V_1_sel");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_A, "outStream_V_dest_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_B, "outStream_V_dest_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state, "outStream_V_dest_V_1_state");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state_cmp_full, "outStream_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, kernel_address0, "kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "kernel_q0");
    sc_trace(mVcdFile, operation, "operation");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, exitcond1_reg_1331, "exitcond1_reg_1331");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, tmp_12_reg_1350, "tmp_12_reg_1350");
    sc_trace(mVcdFile, tmp_12_reg_1350_pp0_iter1_reg, "tmp_12_reg_1350_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, exitcond_fu_1252_p2, "exitcond_fu_1252_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, dataOutSideChannel_i_reg_411, "dataOutSideChannel_i_reg_411");
    sc_trace(mVcdFile, dataOutSideChannel_u_reg_424, "dataOutSideChannel_u_reg_424");
    sc_trace(mVcdFile, dataOutSideChannel_s_reg_437, "dataOutSideChannel_s_reg_437");
    sc_trace(mVcdFile, dataOutSideChannel_k_reg_450, "dataOutSideChannel_k_reg_450");
    sc_trace(mVcdFile, dataOutSideChannel_d_reg_463, "dataOutSideChannel_d_reg_463");
    sc_trace(mVcdFile, col_assign_reg_476, "col_assign_reg_476");
    sc_trace(mVcdFile, idxRow_reg_488, "idxRow_reg_488");
    sc_trace(mVcdFile, pixConvolved_reg_500, "pixConvolved_reg_500");
    sc_trace(mVcdFile, countWait_reg_512, "countWait_reg_512");
    sc_trace(mVcdFile, reg_535, "reg_535");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter1, "ap_block_state12_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage3_iter1, "ap_block_state14_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage5_iter0, "ap_block_state7_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage5_iter1, "ap_block_state16_pp0_stage5_iter1");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage7_iter0, "ap_block_state9_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, reg_539, "reg_539");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage2_iter1, "ap_block_state13_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage4_iter0, "ap_block_state6_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage4_iter1, "ap_block_state15_pp0_stage4_iter1");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage6_iter0, "ap_block_state8_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage8, "ap_CS_fsm_pp0_stage8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage8_iter0, "ap_block_state10_pp0_stage8_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage8_11001, "ap_block_pp0_stage8_11001");
    sc_trace(mVcdFile, lineBuff_val_0_q1, "lineBuff_val_0_q1");
    sc_trace(mVcdFile, reg_543, "reg_543");
    sc_trace(mVcdFile, sel_tmp2_fu_547_p2, "sel_tmp2_fu_547_p2");
    sc_trace(mVcdFile, sel_tmp2_reg_1316, "sel_tmp2_reg_1316");
    sc_trace(mVcdFile, sel_tmp5_fu_553_p2, "sel_tmp5_fu_553_p2");
    sc_trace(mVcdFile, sel_tmp5_reg_1321, "sel_tmp5_reg_1321");
    sc_trace(mVcdFile, sel_tmp8_fu_559_p2, "sel_tmp8_fu_559_p2");
    sc_trace(mVcdFile, sel_tmp8_reg_1326, "sel_tmp8_reg_1326");
    sc_trace(mVcdFile, exitcond1_fu_565_p2, "exitcond1_fu_565_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond1_reg_1331_pp0_iter1_reg, "exitcond1_reg_1331_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_s_fu_571_p1, "tmp_s_fu_571_p1");
    sc_trace(mVcdFile, tmp_s_reg_1335, "tmp_s_reg_1335");
    sc_trace(mVcdFile, lineBuff_val_1_addr_reg_1340, "lineBuff_val_1_addr_reg_1340");
    sc_trace(mVcdFile, lineBuff_val_2_addr_reg_1345, "lineBuff_val_2_addr_reg_1345");
    sc_trace(mVcdFile, tmp_12_fu_577_p2, "tmp_12_fu_577_p2");
    sc_trace(mVcdFile, tmp_keep_V_reg_1354, "tmp_keep_V_reg_1354");
    sc_trace(mVcdFile, tmp_keep_V_reg_1354_pp0_iter1_reg, "tmp_keep_V_reg_1354_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_strb_V_reg_1360, "tmp_strb_V_reg_1360");
    sc_trace(mVcdFile, tmp_strb_V_reg_1360_pp0_iter1_reg, "tmp_strb_V_reg_1360_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_user_V_reg_1366, "tmp_user_V_reg_1366");
    sc_trace(mVcdFile, tmp_user_V_reg_1366_pp0_iter1_reg, "tmp_user_V_reg_1366_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_id_V_reg_1372, "tmp_id_V_reg_1372");
    sc_trace(mVcdFile, tmp_id_V_reg_1372_pp0_iter1_reg, "tmp_id_V_reg_1372_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_dest_V_reg_1378, "tmp_dest_V_reg_1378");
    sc_trace(mVcdFile, tmp_dest_V_reg_1378_pp0_iter1_reg, "tmp_dest_V_reg_1378_pp0_iter1_reg");
    sc_trace(mVcdFile, pixConvolved_3_fu_615_p2, "pixConvolved_3_fu_615_p2");
    sc_trace(mVcdFile, pixConvolved_3_reg_1389, "pixConvolved_3_reg_1389");
    sc_trace(mVcdFile, window_val_0_0_fu_636_p2, "window_val_0_0_fu_636_p2");
    sc_trace(mVcdFile, window_val_0_0_reg_1422, "window_val_0_0_reg_1422");
    sc_trace(mVcdFile, lineBuff_val_1_q0, "lineBuff_val_1_q0");
    sc_trace(mVcdFile, lineBuff_val_1_load_1_reg_1432, "lineBuff_val_1_load_1_reg_1432");
    sc_trace(mVcdFile, lineBuff_val_1_q1, "lineBuff_val_1_q1");
    sc_trace(mVcdFile, lineBuff_val_1_load_2_reg_1437, "lineBuff_val_1_load_2_reg_1437");
    sc_trace(mVcdFile, lineBuff_val_2_q0, "lineBuff_val_2_q0");
    sc_trace(mVcdFile, lineBuff_val_2_load_1_reg_1447, "lineBuff_val_2_load_1_reg_1447");
    sc_trace(mVcdFile, lineBuff_val_2_q1, "lineBuff_val_2_q1");
    sc_trace(mVcdFile, lineBuff_val_2_load_2_reg_1452, "lineBuff_val_2_load_2_reg_1452");
    sc_trace(mVcdFile, tmp_14_fu_655_p1, "tmp_14_fu_655_p1");
    sc_trace(mVcdFile, tmp_14_reg_1462, "tmp_14_reg_1462");
    sc_trace(mVcdFile, lineBuff_val_1_load_3_reg_1470, "lineBuff_val_1_load_3_reg_1470");
    sc_trace(mVcdFile, lineBuff_val_2_load_3_reg_1475, "lineBuff_val_2_load_3_reg_1475");
    sc_trace(mVcdFile, or_cond_fu_705_p2, "or_cond_fu_705_p2");
    sc_trace(mVcdFile, or_cond_reg_1480, "or_cond_reg_1480");
    sc_trace(mVcdFile, tmp4_fu_711_p2, "tmp4_fu_711_p2");
    sc_trace(mVcdFile, tmp4_reg_1486, "tmp4_reg_1486");
    sc_trace(mVcdFile, tmp_15_fu_716_p1, "tmp_15_fu_716_p1");
    sc_trace(mVcdFile, tmp_15_reg_1491, "tmp_15_reg_1491");
    sc_trace(mVcdFile, sel_tmp3_fu_727_p2, "sel_tmp3_fu_727_p2");
    sc_trace(mVcdFile, sel_tmp3_reg_1499, "sel_tmp3_reg_1499");
    sc_trace(mVcdFile, sel_tmp4_fu_732_p3, "sel_tmp4_fu_732_p3");
    sc_trace(mVcdFile, sel_tmp4_reg_1504, "sel_tmp4_reg_1504");
    sc_trace(mVcdFile, window_val_0_2_fu_747_p2, "window_val_0_2_fu_747_p2");
    sc_trace(mVcdFile, window_val_0_2_reg_1509, "window_val_0_2_reg_1509");
    sc_trace(mVcdFile, valInWindow_0_minVal_1_fu_773_p3, "valInWindow_0_minVal_1_fu_773_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_1_reg_1514, "valInWindow_0_minVal_1_reg_1514");
    sc_trace(mVcdFile, valInWindow_0_maxVal_1_fu_797_p3, "valInWindow_0_maxVal_1_fu_797_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_1_reg_1520, "valInWindow_0_maxVal_1_reg_1520");
    sc_trace(mVcdFile, window_val_1_0_fu_812_p2, "window_val_1_0_fu_812_p2");
    sc_trace(mVcdFile, window_val_1_0_reg_1526, "window_val_1_0_reg_1526");
    sc_trace(mVcdFile, valInWindow_0_minVal_2_fu_827_p3, "valInWindow_0_minVal_2_fu_827_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_2_reg_1531, "valInWindow_0_minVal_2_reg_1531");
    sc_trace(mVcdFile, valInWindow_0_maxVal_2_fu_839_p3, "valInWindow_0_maxVal_2_fu_839_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_2_reg_1537, "valInWindow_0_maxVal_2_reg_1537");
    sc_trace(mVcdFile, window_val_1_1_fu_853_p2, "window_val_1_1_fu_853_p2");
    sc_trace(mVcdFile, window_val_1_1_reg_1543, "window_val_1_1_reg_1543");
    sc_trace(mVcdFile, valInWindow_0_minVal_3_fu_868_p3, "valInWindow_0_minVal_3_fu_868_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_3_reg_1548, "valInWindow_0_minVal_3_reg_1548");
    sc_trace(mVcdFile, valInWindow_0_maxVal_3_fu_880_p3, "valInWindow_0_maxVal_3_fu_880_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_3_reg_1554, "valInWindow_0_maxVal_3_reg_1554");
    sc_trace(mVcdFile, window_val_1_2_fu_894_p2, "window_val_1_2_fu_894_p2");
    sc_trace(mVcdFile, window_val_1_2_reg_1560, "window_val_1_2_reg_1560");
    sc_trace(mVcdFile, valInWindow_0_minVal_4_fu_909_p3, "valInWindow_0_minVal_4_fu_909_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_4_reg_1565, "valInWindow_0_minVal_4_reg_1565");
    sc_trace(mVcdFile, valInWindow_0_maxVal_4_fu_921_p3, "valInWindow_0_maxVal_4_fu_921_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_4_reg_1571, "valInWindow_0_maxVal_4_reg_1571");
    sc_trace(mVcdFile, tmp_11_fu_928_p2, "tmp_11_fu_928_p2");
    sc_trace(mVcdFile, tmp_11_reg_1577, "tmp_11_reg_1577");
    sc_trace(mVcdFile, idxCol_1_fu_940_p3, "idxCol_1_fu_940_p3");
    sc_trace(mVcdFile, idxCol_1_reg_1583, "idxCol_1_reg_1583");
    sc_trace(mVcdFile, phitmp_fu_948_p2, "phitmp_fu_948_p2");
    sc_trace(mVcdFile, phitmp_reg_1588, "phitmp_reg_1588");
    sc_trace(mVcdFile, window_val_2_0_fu_961_p2, "window_val_2_0_fu_961_p2");
    sc_trace(mVcdFile, window_val_2_0_reg_1593, "window_val_2_0_reg_1593");
    sc_trace(mVcdFile, kernel_load_8_reg_1598, "kernel_load_8_reg_1598");
    sc_trace(mVcdFile, valInWindow_0_minVal_5_fu_976_p3, "valInWindow_0_minVal_5_fu_976_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_5_reg_1603, "valInWindow_0_minVal_5_reg_1603");
    sc_trace(mVcdFile, valInWindow_0_maxVal_5_fu_988_p3, "valInWindow_0_maxVal_5_fu_988_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_5_reg_1609, "valInWindow_0_maxVal_5_reg_1609");
    sc_trace(mVcdFile, tmp1_fu_1008_p2, "tmp1_fu_1008_p2");
    sc_trace(mVcdFile, tmp1_reg_1615, "tmp1_reg_1615");
    sc_trace(mVcdFile, valInWindow_0_minVal_6_fu_1022_p3, "valInWindow_0_minVal_6_fu_1022_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_6_reg_1620, "valInWindow_0_minVal_6_reg_1620");
    sc_trace(mVcdFile, valInWindow_0_maxVal_6_fu_1034_p3, "valInWindow_0_maxVal_6_fu_1034_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_6_reg_1626, "valInWindow_0_maxVal_6_reg_1626");
    sc_trace(mVcdFile, sel_tmp6_fu_1041_p2, "sel_tmp6_fu_1041_p2");
    sc_trace(mVcdFile, sel_tmp6_reg_1632, "sel_tmp6_reg_1632");
    sc_trace(mVcdFile, sel_tmp9_fu_1051_p2, "sel_tmp9_fu_1051_p2");
    sc_trace(mVcdFile, sel_tmp9_reg_1637, "sel_tmp9_reg_1637");
    sc_trace(mVcdFile, pixConvolved_2_fu_1062_p3, "pixConvolved_2_fu_1062_p3");
    sc_trace(mVcdFile, pixConvolved_2_reg_1642, "pixConvolved_2_reg_1642");
    sc_trace(mVcdFile, tmp3_fu_1085_p2, "tmp3_fu_1085_p2");
    sc_trace(mVcdFile, tmp3_reg_1647, "tmp3_reg_1647");
    sc_trace(mVcdFile, tmp6_fu_1095_p2, "tmp6_fu_1095_p2");
    sc_trace(mVcdFile, tmp6_reg_1652, "tmp6_reg_1652");
    sc_trace(mVcdFile, sel_tmp10_fu_1135_p3, "sel_tmp10_fu_1135_p3");
    sc_trace(mVcdFile, sel_tmp10_reg_1657, "sel_tmp10_reg_1657");
    sc_trace(mVcdFile, tmp_4_reg_1662, "tmp_4_reg_1662");
    sc_trace(mVcdFile, tmp_6_reg_1667, "tmp_6_reg_1667");
    sc_trace(mVcdFile, tmp_7_reg_1672, "tmp_7_reg_1672");
    sc_trace(mVcdFile, idxRow_1_fu_1195_p3, "idxRow_1_fu_1195_p3");
    sc_trace(mVcdFile, idxRow_1_reg_1677, "idxRow_1_reg_1677");
    sc_trace(mVcdFile, dataOutSideChannel_d_1_fu_1245_p3, "dataOutSideChannel_d_1_fu_1245_p3");
    sc_trace(mVcdFile, countWait_2_fu_1258_p2, "countWait_2_fu_1258_p2");
    sc_trace(mVcdFile, countWait_2_reg_1690, "countWait_2_reg_1690");
    sc_trace(mVcdFile, ap_block_state18, "ap_block_state18");
    sc_trace(mVcdFile, ap_block_state18_io, "ap_block_state18_io");
    sc_trace(mVcdFile, tmp_last_V_fu_1264_p2, "tmp_last_V_fu_1264_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage8_subdone, "ap_block_pp0_stage8_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, lineBuff_val_0_address0, "lineBuff_val_0_address0");
    sc_trace(mVcdFile, lineBuff_val_0_ce0, "lineBuff_val_0_ce0");
    sc_trace(mVcdFile, lineBuff_val_0_we0, "lineBuff_val_0_we0");
    sc_trace(mVcdFile, lineBuff_val_0_q0, "lineBuff_val_0_q0");
    sc_trace(mVcdFile, lineBuff_val_0_address1, "lineBuff_val_0_address1");
    sc_trace(mVcdFile, lineBuff_val_0_ce1, "lineBuff_val_0_ce1");
    sc_trace(mVcdFile, lineBuff_val_1_address0, "lineBuff_val_1_address0");
    sc_trace(mVcdFile, lineBuff_val_1_ce0, "lineBuff_val_1_ce0");
    sc_trace(mVcdFile, lineBuff_val_1_we0, "lineBuff_val_1_we0");
    sc_trace(mVcdFile, lineBuff_val_1_address1, "lineBuff_val_1_address1");
    sc_trace(mVcdFile, lineBuff_val_1_ce1, "lineBuff_val_1_ce1");
    sc_trace(mVcdFile, lineBuff_val_2_address0, "lineBuff_val_2_address0");
    sc_trace(mVcdFile, lineBuff_val_2_ce0, "lineBuff_val_2_ce0");
    sc_trace(mVcdFile, lineBuff_val_2_we0, "lineBuff_val_2_we0");
    sc_trace(mVcdFile, lineBuff_val_2_address1, "lineBuff_val_2_address1");
    sc_trace(mVcdFile, lineBuff_val_2_ce1, "lineBuff_val_2_ce1");
    sc_trace(mVcdFile, ap_phi_mux_col_assign_phi_fu_480_p4, "ap_phi_mux_col_assign_phi_fu_480_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_idxRow_phi_fu_492_p4, "ap_phi_mux_idxRow_phi_fu_492_p4");
    sc_trace(mVcdFile, ap_phi_mux_pixConvolved_phi_fu_504_p4, "ap_phi_mux_pixConvolved_phi_fu_504_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_phi_mux_countWait_phi_fu_516_p4, "ap_phi_mux_countWait_phi_fu_516_p4");
    sc_trace(mVcdFile, countWait_1_reg_524, "countWait_1_reg_524");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_5_fu_608_p1, "tmp_5_fu_608_p1");
    sc_trace(mVcdFile, tmp_27_0_1_fu_621_p1, "tmp_27_0_1_fu_621_p1");
    sc_trace(mVcdFile, tmp_27_0_2_fu_648_p1, "tmp_27_0_2_fu_648_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, ap_block_pp0_stage4_01001, "ap_block_pp0_stage4_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, ap_block_pp0_stage8, "ap_block_pp0_stage8");
    sc_trace(mVcdFile, window_val_0_0_fu_636_p0, "window_val_0_0_fu_636_p0");
    sc_trace(mVcdFile, window_val_0_0_fu_636_p1, "window_val_0_0_fu_636_p1");
    sc_trace(mVcdFile, col_assign_1_0_2_fu_642_p2, "col_assign_1_0_2_fu_642_p2");
    sc_trace(mVcdFile, window_val_0_1_fu_667_p0, "window_val_0_1_fu_667_p0");
    sc_trace(mVcdFile, window_val_0_1_fu_667_p1, "window_val_0_1_fu_667_p1");
    sc_trace(mVcdFile, tmp_1_fu_673_p4, "tmp_1_fu_673_p4");
    sc_trace(mVcdFile, tmp_2_fu_689_p4, "tmp_2_fu_689_p4");
    sc_trace(mVcdFile, icmp_fu_683_p2, "icmp_fu_683_p2");
    sc_trace(mVcdFile, icmp4_fu_699_p2, "icmp4_fu_699_p2");
    sc_trace(mVcdFile, window_val_0_1_fu_667_p2, "window_val_0_1_fu_667_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_720_p3, "sel_tmp1_fu_720_p3");
    sc_trace(mVcdFile, window_val_0_2_fu_747_p0, "window_val_0_2_fu_747_p0");
    sc_trace(mVcdFile, window_val_0_2_fu_747_p1, "window_val_0_2_fu_747_p1");
    sc_trace(mVcdFile, tmp_5_0_1_i_fu_753_p2, "tmp_5_0_1_i_fu_753_p2");
    sc_trace(mVcdFile, tmp_16_fu_763_p1, "tmp_16_fu_763_p1");
    sc_trace(mVcdFile, valInWindow_0_minVal_fu_757_p3, "valInWindow_0_minVal_fu_757_p3");
    sc_trace(mVcdFile, tmp_5_0_2_i_fu_767_p2, "tmp_5_0_2_i_fu_767_p2");
    sc_trace(mVcdFile, tmp_11_0_1_i_fu_781_p2, "tmp_11_0_1_i_fu_781_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_fu_785_p3, "valInWindow_0_maxVal_fu_785_p3");
    sc_trace(mVcdFile, tmp_11_0_2_i_fu_791_p2, "tmp_11_0_2_i_fu_791_p2");
    sc_trace(mVcdFile, window_val_1_0_fu_812_p0, "window_val_1_0_fu_812_p0");
    sc_trace(mVcdFile, window_val_1_0_fu_812_p1, "window_val_1_0_fu_812_p1");
    sc_trace(mVcdFile, tmp_17_fu_818_p1, "tmp_17_fu_818_p1");
    sc_trace(mVcdFile, tmp_5_1_i_fu_822_p2, "tmp_5_1_i_fu_822_p2");
    sc_trace(mVcdFile, tmp_11_1_i_fu_834_p2, "tmp_11_1_i_fu_834_p2");
    sc_trace(mVcdFile, window_val_1_1_fu_853_p0, "window_val_1_1_fu_853_p0");
    sc_trace(mVcdFile, window_val_1_1_fu_853_p1, "window_val_1_1_fu_853_p1");
    sc_trace(mVcdFile, tmp_18_fu_859_p1, "tmp_18_fu_859_p1");
    sc_trace(mVcdFile, tmp_5_1_1_i_fu_863_p2, "tmp_5_1_1_i_fu_863_p2");
    sc_trace(mVcdFile, tmp_11_1_1_i_fu_875_p2, "tmp_11_1_1_i_fu_875_p2");
    sc_trace(mVcdFile, window_val_1_2_fu_894_p0, "window_val_1_2_fu_894_p0");
    sc_trace(mVcdFile, window_val_1_2_fu_894_p1, "window_val_1_2_fu_894_p1");
    sc_trace(mVcdFile, tmp_19_fu_900_p1, "tmp_19_fu_900_p1");
    sc_trace(mVcdFile, tmp_5_1_2_i_fu_904_p2, "tmp_5_1_2_i_fu_904_p2");
    sc_trace(mVcdFile, tmp_11_1_2_i_fu_916_p2, "tmp_11_1_2_i_fu_916_p2");
    sc_trace(mVcdFile, idxCol_fu_934_p2, "idxCol_fu_934_p2");
    sc_trace(mVcdFile, window_val_2_0_fu_961_p0, "window_val_2_0_fu_961_p0");
    sc_trace(mVcdFile, window_val_2_0_fu_961_p1, "window_val_2_0_fu_961_p1");
    sc_trace(mVcdFile, tmp_20_fu_967_p1, "tmp_20_fu_967_p1");
    sc_trace(mVcdFile, tmp_5_2_i_fu_971_p2, "tmp_5_2_i_fu_971_p2");
    sc_trace(mVcdFile, tmp_11_2_i_fu_983_p2, "tmp_11_2_i_fu_983_p2");
    sc_trace(mVcdFile, window_val_2_1_fu_1002_p0, "window_val_2_1_fu_1002_p0");
    sc_trace(mVcdFile, window_val_2_1_fu_1002_p1, "window_val_2_1_fu_1002_p1");
    sc_trace(mVcdFile, window_val_2_1_fu_1002_p2, "window_val_2_1_fu_1002_p2");
    sc_trace(mVcdFile, tmp_21_fu_1013_p1, "tmp_21_fu_1013_p1");
    sc_trace(mVcdFile, tmp_5_2_1_i_fu_1017_p2, "tmp_5_2_1_i_fu_1017_p2");
    sc_trace(mVcdFile, tmp_11_2_1_i_fu_1029_p2, "tmp_11_2_1_i_fu_1029_p2");
    sc_trace(mVcdFile, sel_tmp7_fu_1045_p3, "sel_tmp7_fu_1045_p3");
    sc_trace(mVcdFile, pixConvolved_1_fu_1055_p3, "pixConvolved_1_fu_1055_p3");
    sc_trace(mVcdFile, window_val_2_2_fu_1075_p0, "window_val_2_2_fu_1075_p0");
    sc_trace(mVcdFile, window_val_2_2_fu_1075_p1, "window_val_2_2_fu_1075_p1");
    sc_trace(mVcdFile, tmp2_fu_1081_p2, "tmp2_fu_1081_p2");
    sc_trace(mVcdFile, window_val_2_2_fu_1075_p2, "window_val_2_2_fu_1075_p2");
    sc_trace(mVcdFile, tmp5_fu_1090_p2, "tmp5_fu_1090_p2");
    sc_trace(mVcdFile, tmp_22_fu_1100_p1, "tmp_22_fu_1100_p1");
    sc_trace(mVcdFile, tmp_5_2_2_i_fu_1104_p2, "tmp_5_2_2_i_fu_1104_p2");
    sc_trace(mVcdFile, tmp_11_2_2_i_fu_1116_p2, "tmp_11_2_2_i_fu_1116_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_7_fu_1121_p3, "valInWindow_0_maxVal_7_fu_1121_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_7_fu_1109_p3, "valInWindow_0_minVal_7_fu_1109_p3");
    sc_trace(mVcdFile, sel_tmp_fu_1128_p3, "sel_tmp_fu_1128_p3");
    sc_trace(mVcdFile, tmp7_fu_1142_p2, "tmp7_fu_1142_p2");
    sc_trace(mVcdFile, valOutput_fu_1146_p2, "valOutput_fu_1146_p2");
    sc_trace(mVcdFile, tmp_20_tr_fu_1151_p1, "tmp_20_tr_fu_1151_p1");
    sc_trace(mVcdFile, p_neg_fu_1163_p2, "p_neg_fu_1163_p2");
    sc_trace(mVcdFile, idxRow_2_fu_1189_p2, "idxRow_2_fu_1189_p2");
    sc_trace(mVcdFile, tmp_5_cast_fu_1202_p1, "tmp_5_cast_fu_1202_p1");
    sc_trace(mVcdFile, tmp_8_fu_1205_p1, "tmp_8_fu_1205_p1");
    sc_trace(mVcdFile, tmp_9_fu_1208_p2, "tmp_9_fu_1208_p2");
    sc_trace(mVcdFile, tmp_10_cast_fu_1214_p1, "tmp_10_cast_fu_1214_p1");
    sc_trace(mVcdFile, valOutput_1_fu_1218_p3, "valOutput_1_fu_1218_p3");
    sc_trace(mVcdFile, tmp_13_fu_1229_p3, "tmp_13_fu_1229_p3");
    sc_trace(mVcdFile, tmp_10_fu_1225_p1, "tmp_10_fu_1225_p1");
    sc_trace(mVcdFile, p_s_fu_1237_p3, "p_s_fu_1237_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, window_val_0_0_fu_636_p10, "window_val_0_0_fu_636_p10");
    sc_trace(mVcdFile, window_val_0_1_fu_667_p10, "window_val_0_1_fu_667_p10");
    sc_trace(mVcdFile, window_val_0_2_fu_747_p10, "window_val_0_2_fu_747_p10");
    sc_trace(mVcdFile, window_val_1_0_fu_812_p10, "window_val_1_0_fu_812_p10");
    sc_trace(mVcdFile, window_val_1_1_fu_853_p10, "window_val_1_1_fu_853_p10");
    sc_trace(mVcdFile, window_val_1_2_fu_894_p10, "window_val_1_2_fu_894_p10");
    sc_trace(mVcdFile, window_val_2_0_fu_961_p10, "window_val_2_0_fu_961_p10");
    sc_trace(mVcdFile, window_val_2_1_fu_1002_p10, "window_val_2_1_fu_1002_p10");
    sc_trace(mVcdFile, window_val_2_2_fu_1075_p10, "window_val_2_2_fu_1075_p10");
#endif

    }
    mHdltvinHandle.open("doImgProc.hdltvin.dat");
    mHdltvoutHandle.open("doImgProc.hdltvout.dat");
}

doImgProc::~doImgProc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete doImgProc_CRTL_BUS_s_axi_U;
    delete doImgProc_KERNEL_BUS_s_axi_U;
    delete lineBuff_val_0_U;
    delete lineBuff_val_1_U;
    delete lineBuff_val_2_U;
}

void doImgProc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void doImgProc::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage8_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        col_assign_reg_476 = idxCol_1_reg_1583.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        col_assign_reg_476 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        countWait_1_reg_524 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        countWait_1_reg_524 = countWait_2_reg_1690.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        countWait_reg_512 = phitmp_reg_1588.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        countWait_reg_512 = ap_const_lv17_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        idxRow_reg_488 = idxRow_1_reg_1677.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idxRow_reg_488 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_out.read()))) {
            inStream_V_data_V_0_sel_rd =  (sc_logic) (~inStream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_in.read()))) {
            inStream_V_data_V_0_sel_wr =  (sc_logic) (~inStream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            inStream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()))))) {
            inStream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_out.read()))) {
            inStream_V_dest_V_0_sel_rd =  (sc_logic) (~inStream_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_in.read()))) {
            inStream_V_dest_V_0_sel_wr =  (sc_logic) (~inStream_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()))))) {
            inStream_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_out.read()))) {
            inStream_V_id_V_0_sel_rd =  (sc_logic) (~inStream_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_in.read()))) {
            inStream_V_id_V_0_sel_wr =  (sc_logic) (~inStream_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()))))) {
            inStream_V_id_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_out.read()))) {
            inStream_V_keep_V_0_sel_rd =  (sc_logic) (~inStream_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_in.read()))) {
            inStream_V_keep_V_0_sel_wr =  (sc_logic) (~inStream_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()))))) {
            inStream_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_out.read()))) {
            inStream_V_strb_V_0_sel_rd =  (sc_logic) (~inStream_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_in.read()))) {
            inStream_V_strb_V_0_sel_wr =  (sc_logic) (~inStream_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()))))) {
            inStream_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_out.read()))) {
            inStream_V_user_V_0_sel_rd =  (sc_logic) (~inStream_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_in.read()))) {
            inStream_V_user_V_0_sel_wr =  (sc_logic) (~inStream_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()))))) {
            inStream_V_user_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_out.read()))) {
            outStream_V_data_V_1_sel_rd =  (sc_logic) (~outStream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_in.read()))) {
            outStream_V_data_V_1_sel_wr =  (sc_logic) (~outStream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()))))) {
            outStream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_out.read()))) {
            outStream_V_dest_V_1_sel_rd =  (sc_logic) (~outStream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_in.read()))) {
            outStream_V_dest_V_1_sel_wr =  (sc_logic) (~outStream_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()))))) {
            outStream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_out.read()))) {
            outStream_V_id_V_1_sel_rd =  (sc_logic) (~outStream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_in.read()))) {
            outStream_V_id_V_1_sel_wr =  (sc_logic) (~outStream_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()))))) {
            outStream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_out.read()))) {
            outStream_V_keep_V_1_sel_rd =  (sc_logic) (~outStream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_in.read()))) {
            outStream_V_keep_V_1_sel_wr =  (sc_logic) (~outStream_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()))))) {
            outStream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_out.read()))) {
            outStream_V_last_V_1_sel_rd =  (sc_logic) (~outStream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_in.read()))) {
            outStream_V_last_V_1_sel_wr =  (sc_logic) (~outStream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()))))) {
            outStream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_out.read()))) {
            outStream_V_strb_V_1_sel_rd =  (sc_logic) (~outStream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_in.read()))) {
            outStream_V_strb_V_1_sel_wr =  (sc_logic) (~outStream_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()))))) {
            outStream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_out.read()))) {
            outStream_V_user_V_1_sel_rd =  (sc_logic) (~outStream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_in.read()))) {
            outStream_V_user_V_1_sel_wr =  (sc_logic) (~outStream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()))))) {
            outStream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        pixConvolved_reg_500 = pixConvolved_2_reg_1642.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pixConvolved_reg_500 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())))) {
        countWait_2_reg_1690 = countWait_2_fu_1258_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        dataOutSideChannel_d_reg_463 = tmp_dest_V_reg_1378_pp0_iter1_reg.read();
        dataOutSideChannel_i_reg_411 = tmp_id_V_reg_1372_pp0_iter1_reg.read();
        dataOutSideChannel_k_reg_450 = tmp_keep_V_reg_1354_pp0_iter1_reg.read();
        dataOutSideChannel_s_reg_437 = tmp_strb_V_reg_1360_pp0_iter1_reg.read();
        dataOutSideChannel_u_reg_424 = tmp_user_V_reg_1366_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_1331 = exitcond1_fu_565_p2.read();
        exitcond1_reg_1331_pp0_iter1_reg = exitcond1_reg_1331.read();
        tmp_12_reg_1350_pp0_iter1_reg = tmp_12_reg_1350.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        idxCol_1_reg_1583 = idxCol_1_fu_940_p3.read();
        phitmp_reg_1588 = phitmp_fu_948_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        idxRow_1_reg_1677 = idxRow_1_fu_1195_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_A.read())) {
        inStream_V_data_V_0_payload_A = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_B.read())) {
        inStream_V_data_V_0_payload_B = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_A.read())) {
        inStream_V_dest_V_0_payload_A = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_B.read())) {
        inStream_V_dest_V_0_payload_B = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_A.read())) {
        inStream_V_id_V_0_payload_A = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_B.read())) {
        inStream_V_id_V_0_payload_B = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_A.read())) {
        inStream_V_keep_V_0_payload_A = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_B.read())) {
        inStream_V_keep_V_0_payload_B = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_A.read())) {
        inStream_V_strb_V_0_payload_A = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_B.read())) {
        inStream_V_strb_V_0_payload_B = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_A.read())) {
        inStream_V_user_V_0_payload_A = inStream_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_B.read())) {
        inStream_V_user_V_0_payload_B = inStream_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        kernel_load_8_reg_1598 = kernel_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_565_p2.read()))) {
        lineBuff_val_1_addr_reg_1340 =  (sc_lv<8>) (tmp_s_fu_571_p1.read());
        lineBuff_val_2_addr_reg_1345 =  (sc_lv<8>) (tmp_s_fu_571_p1.read());
        tmp_12_reg_1350 = tmp_12_fu_577_p2.read();
        tmp_s_reg_1335 = tmp_s_fu_571_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_load_1_reg_1432 = lineBuff_val_1_q0.read();
        lineBuff_val_1_load_2_reg_1437 = lineBuff_val_1_q1.read();
        lineBuff_val_2_load_1_reg_1447 = lineBuff_val_2_q0.read();
        lineBuff_val_2_load_2_reg_1452 = lineBuff_val_2_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_load_3_reg_1470 = lineBuff_val_1_q1.read();
        lineBuff_val_2_load_3_reg_1475 = lineBuff_val_2_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        or_cond_reg_1480 = or_cond_fu_705_p2.read();
        sel_tmp3_reg_1499 = sel_tmp3_fu_727_p2.read();
        sel_tmp4_reg_1504 = sel_tmp4_fu_732_p3.read();
        tmp4_reg_1486 = tmp4_fu_711_p2.read();
        tmp_15_reg_1491 = tmp_15_fu_716_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_A.read())) {
        outStream_V_data_V_1_payload_A = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_B.read())) {
        outStream_V_data_V_1_payload_B = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_A.read())) {
        outStream_V_dest_V_1_payload_A = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_B.read())) {
        outStream_V_dest_V_1_payload_B = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_A.read())) {
        outStream_V_id_V_1_payload_A = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_B.read())) {
        outStream_V_id_V_1_payload_B = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_A.read())) {
        outStream_V_keep_V_1_payload_A = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_B.read())) {
        outStream_V_keep_V_1_payload_B = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_A.read())) {
        outStream_V_last_V_1_payload_A = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_B.read())) {
        outStream_V_last_V_1_payload_B = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_A.read())) {
        outStream_V_strb_V_1_payload_A = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_B.read())) {
        outStream_V_strb_V_1_payload_B = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_A.read())) {
        outStream_V_user_V_1_payload_A = outStream_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_B.read())) {
        outStream_V_user_V_1_payload_B = outStream_V_user_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        pixConvolved_2_reg_1642 = pixConvolved_2_fu_1062_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        pixConvolved_3_reg_1389 = pixConvolved_3_fu_615_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)))) {
        reg_535 = kernel_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0)))) {
        reg_539 = kernel_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        reg_543 = lineBuff_val_0_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp9_reg_1637.read()))) {
        sel_tmp10_reg_1657 = sel_tmp10_fu_1135_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sel_tmp2_reg_1316 = sel_tmp2_fu_547_p2.read();
        sel_tmp5_reg_1321 = sel_tmp5_fu_553_p2.read();
        sel_tmp8_reg_1326 = sel_tmp8_fu_559_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        sel_tmp6_reg_1632 = sel_tmp6_fu_1041_p2.read();
        sel_tmp9_reg_1637 = sel_tmp9_fu_1051_p2.read();
        tmp1_reg_1615 = tmp1_fu_1008_p2.read();
        valInWindow_0_minVal_6_reg_1620 = valInWindow_0_minVal_6_fu_1022_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp9_reg_1637.read()))) {
        tmp3_reg_1647 = tmp3_fu_1085_p2.read();
        tmp6_reg_1652 = tmp6_fu_1095_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        tmp_11_reg_1577 = tmp_11_fu_928_p2.read();
        valInWindow_0_minVal_4_reg_1565 = valInWindow_0_minVal_4_fu_909_p3.read();
        window_val_1_2_reg_1560 = window_val_1_2_fu_894_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        tmp_14_reg_1462 = tmp_14_fu_655_p1.read();
        window_val_0_0_reg_1422 = window_val_0_0_fu_636_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp9_reg_1637.read()))) {
        tmp_4_reg_1662 = valOutput_fu_1146_p2.read().range(15, 15);
        tmp_6_reg_1667 = p_neg_fu_1163_p2.read().range(16, 3);
        tmp_7_reg_1672 = valOutput_fu_1146_p2.read().range(15, 3);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_dest_V_reg_1378 = inStream_V_dest_V_0_data_out.read();
        tmp_id_V_reg_1372 = inStream_V_id_V_0_data_out.read();
        tmp_keep_V_reg_1354 = inStream_V_keep_V_0_data_out.read();
        tmp_strb_V_reg_1360 = inStream_V_strb_V_0_data_out.read();
        tmp_user_V_reg_1366 = inStream_V_user_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_dest_V_reg_1378_pp0_iter1_reg = tmp_dest_V_reg_1378.read();
        tmp_id_V_reg_1372_pp0_iter1_reg = tmp_id_V_reg_1372.read();
        tmp_keep_V_reg_1354_pp0_iter1_reg = tmp_keep_V_reg_1354.read();
        tmp_strb_V_reg_1360_pp0_iter1_reg = tmp_strb_V_reg_1360.read();
        tmp_user_V_reg_1366_pp0_iter1_reg = tmp_user_V_reg_1366.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()))) {
        valInWindow_0_maxVal_1_reg_1520 = valInWindow_0_maxVal_1_fu_797_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()))) {
        valInWindow_0_maxVal_2_reg_1537 = valInWindow_0_maxVal_2_fu_839_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()))) {
        valInWindow_0_maxVal_3_reg_1554 = valInWindow_0_maxVal_3_fu_880_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()))) {
        valInWindow_0_maxVal_4_reg_1571 = valInWindow_0_maxVal_4_fu_921_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()))) {
        valInWindow_0_maxVal_5_reg_1609 = valInWindow_0_maxVal_5_fu_988_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_1499.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        valInWindow_0_maxVal_6_reg_1626 = valInWindow_0_maxVal_6_fu_1034_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        valInWindow_0_minVal_1_reg_1514 = valInWindow_0_minVal_1_fu_773_p3.read();
        window_val_0_2_reg_1509 = window_val_0_2_fu_747_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        valInWindow_0_minVal_2_reg_1531 = valInWindow_0_minVal_2_fu_827_p3.read();
        window_val_1_0_reg_1526 = window_val_1_0_fu_812_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0))) {
        valInWindow_0_minVal_3_reg_1548 = valInWindow_0_minVal_3_fu_868_p3.read();
        window_val_1_1_reg_1543 = window_val_1_1_fu_853_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        valInWindow_0_minVal_5_reg_1603 = valInWindow_0_minVal_5_fu_976_p3.read();
        window_val_2_0_reg_1593 = window_val_2_0_fu_961_p2.read();
    }
}

void doImgProc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[4];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[5];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[6];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[7];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[8];
}

void doImgProc::thread_ap_CS_fsm_pp0_stage8() {
    ap_CS_fsm_pp0_stage8 = ap_CS_fsm.read()[9];
}

void doImgProc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void doImgProc::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[10];
}

void doImgProc::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[11];
}

void doImgProc::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[12];
}

void doImgProc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void doImgProc::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void doImgProc::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage4_01001() {
    ap_block_pp0_stage4_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read()));
}

void doImgProc::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read()));
}

void doImgProc::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void doImgProc::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void doImgProc::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage8() {
    ap_block_pp0_stage8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage8_11001() {
    ap_block_pp0_stage8_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_pp0_stage8_subdone() {
    ap_block_pp0_stage8_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state10_pp0_stage8_iter0() {
    ap_block_state10_pp0_stage8_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state12_pp0_stage1_iter1() {
    ap_block_state12_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state13_pp0_stage2_iter1() {
    ap_block_state13_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state14_pp0_stage3_iter1() {
    ap_block_state14_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()));
}

void doImgProc::thread_ap_block_state15_pp0_stage4_iter1() {
    ap_block_state15_pp0_stage4_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()));
}

void doImgProc::thread_ap_block_state16_pp0_stage5_iter1() {
    ap_block_state16_pp0_stage5_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state18() {
    ap_block_state18 = (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()));
}

void doImgProc::thread_ap_block_state18_io() {
    ap_block_state18_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()));
}

void doImgProc::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void doImgProc::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state6_pp0_stage4_iter0() {
    ap_block_state6_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state7_pp0_stage5_iter0() {
    ap_block_state7_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state8_pp0_stage6_iter0() {
    ap_block_state8_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_block_state9_pp0_stage7_iter0() {
    ap_block_state9_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgProc::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_565_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void doImgProc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_1252_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void doImgProc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void doImgProc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void doImgProc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void doImgProc::thread_ap_phi_mux_col_assign_phi_fu_480_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_col_assign_phi_fu_480_p4 = idxCol_1_reg_1583.read();
    } else {
        ap_phi_mux_col_assign_phi_fu_480_p4 = col_assign_reg_476.read();
    }
}

void doImgProc::thread_ap_phi_mux_countWait_phi_fu_516_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_countWait_phi_fu_516_p4 = phitmp_reg_1588.read();
    } else {
        ap_phi_mux_countWait_phi_fu_516_p4 = countWait_reg_512.read();
    }
}

void doImgProc::thread_ap_phi_mux_idxRow_phi_fu_492_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()))) {
        ap_phi_mux_idxRow_phi_fu_492_p4 = idxRow_1_reg_1677.read();
    } else {
        ap_phi_mux_idxRow_phi_fu_492_p4 = idxRow_reg_488.read();
    }
}

void doImgProc::thread_ap_phi_mux_pixConvolved_phi_fu_504_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        ap_phi_mux_pixConvolved_phi_fu_504_p4 = pixConvolved_2_reg_1642.read();
    } else {
        ap_phi_mux_pixConvolved_phi_fu_504_p4 = pixConvolved_reg_500.read();
    }
}

void doImgProc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_1252_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void doImgProc::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void doImgProc::thread_col_assign_1_0_2_fu_642_p2() {
    col_assign_1_0_2_fu_642_p2 = (!ap_const_lv32_2.is_01() || !pixConvolved_reg_500.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_2) + sc_biguint<32>(pixConvolved_reg_500.read()));
}

void doImgProc::thread_countWait_2_fu_1258_p2() {
    countWait_2_fu_1258_p2 = (!countWait_1_reg_524.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(countWait_1_reg_524.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void doImgProc::thread_dataOutSideChannel_d_1_fu_1245_p3() {
    dataOutSideChannel_d_1_fu_1245_p3 = (!sel_tmp9_reg_1637.read()[0].is_01())? sc_lv<8>(): ((sel_tmp9_reg_1637.read()[0].to_bool())? p_s_fu_1237_p3.read(): sel_tmp10_reg_1657.read());
}

void doImgProc::thread_exitcond1_fu_565_p2() {
    exitcond1_fu_565_p2 = (!ap_phi_mux_countWait_phi_fu_516_p4.read().is_01() || !ap_const_lv17_12C01.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_countWait_phi_fu_516_p4.read() == ap_const_lv17_12C01);
}

void doImgProc::thread_exitcond_fu_1252_p2() {
    exitcond_fu_1252_p2 = (!countWait_1_reg_524.read().is_01() || !ap_const_lv8_F1.is_01())? sc_lv<1>(): sc_lv<1>(countWait_1_reg_524.read() == ap_const_lv8_F1);
}

void doImgProc::thread_icmp4_fu_699_p2() {
    icmp4_fu_699_p2 = (!tmp_2_fu_689_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_2_fu_689_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void doImgProc::thread_icmp_fu_683_p2() {
    icmp_fu_683_p2 = (!tmp_1_fu_673_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_1_fu_673_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void doImgProc::thread_idxCol_1_fu_940_p3() {
    idxCol_1_fu_940_p3 = (!tmp_11_fu_928_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_11_fu_928_p2.read()[0].to_bool())? idxCol_fu_934_p2.read(): ap_const_lv32_0);
}

void doImgProc::thread_idxCol_fu_934_p2() {
    idxCol_fu_934_p2 = (!ap_const_lv32_1.is_01() || !col_assign_reg_476.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(col_assign_reg_476.read()));
}

void doImgProc::thread_idxRow_1_fu_1195_p3() {
    idxRow_1_fu_1195_p3 = (!tmp_11_reg_1577.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1577.read()[0].to_bool())? idxRow_reg_488.read(): idxRow_2_fu_1189_p2.read());
}

void doImgProc::thread_idxRow_2_fu_1189_p2() {
    idxRow_2_fu_1189_p2 = (!ap_const_lv32_1.is_01() || !idxRow_reg_488.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(idxRow_reg_488.read()));
}

void doImgProc::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()))) {
        inStream_TDATA_blk_n = inStream_V_data_V_0_state.read()[0];
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void doImgProc::thread_inStream_TREADY() {
    inStream_TREADY = inStream_V_dest_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_data_V_0_ack_in() {
    inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_sel.read())) {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B.read();
    } else {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_data_V_0_load_A() {
    inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full.read() & ~inStream_V_data_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_data_V_0_load_B() {
    inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr.read() & inStream_V_data_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_data_V_0_sel() {
    inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_data_V_0_state_cmp_full() {
    inStream_V_data_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_data_V_0_vld_in() {
    inStream_V_data_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_data_V_0_vld_out() {
    inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state.read()[0];
}

void doImgProc::thread_inStream_V_dest_V_0_ack_in() {
    inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_sel.read())) {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B.read();
    } else {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_dest_V_0_load_A() {
    inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full.read() & ~inStream_V_dest_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_dest_V_0_load_B() {
    inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_sel_wr.read() & inStream_V_dest_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_dest_V_0_sel() {
    inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_dest_V_0_state_cmp_full() {
    inStream_V_dest_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_dest_V_0_vld_in() {
    inStream_V_dest_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_dest_V_0_vld_out() {
    inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state.read()[0];
}

void doImgProc::thread_inStream_V_id_V_0_ack_in() {
    inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_sel.read())) {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B.read();
    } else {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_id_V_0_load_A() {
    inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full.read() & ~inStream_V_id_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_id_V_0_load_B() {
    inStream_V_id_V_0_load_B = (inStream_V_id_V_0_sel_wr.read() & inStream_V_id_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_id_V_0_sel() {
    inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_id_V_0_state_cmp_full() {
    inStream_V_id_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_id_V_0_vld_in() {
    inStream_V_id_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_id_V_0_vld_out() {
    inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state.read()[0];
}

void doImgProc::thread_inStream_V_keep_V_0_ack_in() {
    inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_sel.read())) {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B.read();
    } else {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_keep_V_0_load_A() {
    inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full.read() & ~inStream_V_keep_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_keep_V_0_load_B() {
    inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_sel_wr.read() & inStream_V_keep_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_keep_V_0_sel() {
    inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_keep_V_0_state_cmp_full() {
    inStream_V_keep_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_keep_V_0_vld_in() {
    inStream_V_keep_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_keep_V_0_vld_out() {
    inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state.read()[0];
}

void doImgProc::thread_inStream_V_strb_V_0_ack_in() {
    inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_sel.read())) {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B.read();
    } else {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_strb_V_0_load_A() {
    inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full.read() & ~inStream_V_strb_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_strb_V_0_load_B() {
    inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_sel_wr.read() & inStream_V_strb_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_strb_V_0_sel() {
    inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_strb_V_0_state_cmp_full() {
    inStream_V_strb_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_strb_V_0_vld_in() {
    inStream_V_strb_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_strb_V_0_vld_out() {
    inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state.read()[0];
}

void doImgProc::thread_inStream_V_user_V_0_ack_in() {
    inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state.read()[1];
}

void doImgProc::thread_inStream_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        inStream_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgProc::thread_inStream_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_sel.read())) {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B.read();
    } else {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A.read();
    }
}

void doImgProc::thread_inStream_V_user_V_0_load_A() {
    inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full.read() & ~inStream_V_user_V_0_sel_wr.read());
}

void doImgProc::thread_inStream_V_user_V_0_load_B() {
    inStream_V_user_V_0_load_B = (inStream_V_user_V_0_sel_wr.read() & inStream_V_user_V_0_state_cmp_full.read());
}

void doImgProc::thread_inStream_V_user_V_0_sel() {
    inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd.read();
}

void doImgProc::thread_inStream_V_user_V_0_state_cmp_full() {
    inStream_V_user_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_inStream_V_user_V_0_vld_in() {
    inStream_V_user_V_0_vld_in = inStream_TVALID.read();
}

void doImgProc::thread_inStream_V_user_V_0_vld_out() {
    inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state.read()[0];
}

void doImgProc::thread_kernel_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage8.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_8);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_7);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_6);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_5);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_4);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_3);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_1);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_0);
        } else {
            kernel_address0 = "XXXX";
        }
    } else {
        kernel_address0 = "XXXX";
    }
}

void doImgProc::thread_kernel_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address0 =  (sc_lv<8>) (tmp_5_fu_608_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address0 =  (sc_lv<8>) (tmp_s_reg_1335.read());
        } else {
            lineBuff_val_0_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_0_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_0_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address1 =  (sc_lv<8>) (tmp_27_0_2_fu_648_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address1 =  (sc_lv<8>) (tmp_27_0_1_fu_621_p1.read());
        } else {
            lineBuff_val_0_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_0_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_0_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce1 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_0_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_we0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<8>) (tmp_5_fu_608_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1340.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<8>) (tmp_s_fu_571_p1.read());
        } else {
            lineBuff_val_1_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_1_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_1_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<8>) (tmp_27_0_2_fu_648_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<8>) (tmp_27_0_1_fu_621_p1.read());
        } else {
            lineBuff_val_1_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_1_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_1_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce1 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_we0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<8>) (tmp_5_fu_608_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1345.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<8>) (tmp_s_fu_571_p1.read());
        } else {
            lineBuff_val_2_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_2_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_2_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<8>) (tmp_27_0_2_fu_648_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<8>) (tmp_27_0_1_fu_621_p1.read());
        } else {
            lineBuff_val_2_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_2_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_lineBuff_val_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce0 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_2_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce1 = ap_const_logic_0;
    }
}

void doImgProc::thread_lineBuff_val_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_1331.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_2_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_we0 = ap_const_logic_0;
    }
}

void doImgProc::thread_or_cond_fu_705_p2() {
    or_cond_fu_705_p2 = (icmp_fu_683_p2.read() & icmp4_fu_699_p2.read());
}

void doImgProc::thread_outStream_TDATA() {
    outStream_TDATA = outStream_V_data_V_1_data_out.read();
}

void doImgProc::thread_outStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        outStream_TDATA_blk_n = outStream_V_data_V_1_state.read()[1];
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void doImgProc::thread_outStream_TDEST() {
    outStream_TDEST = outStream_V_dest_V_1_data_out.read();
}

void doImgProc::thread_outStream_TID() {
    outStream_TID = outStream_V_id_V_1_data_out.read();
}

void doImgProc::thread_outStream_TKEEP() {
    outStream_TKEEP = outStream_V_keep_V_1_data_out.read();
}

void doImgProc::thread_outStream_TLAST() {
    outStream_TLAST = outStream_V_last_V_1_data_out.read();
}

void doImgProc::thread_outStream_TSTRB() {
    outStream_TSTRB = outStream_V_strb_V_1_data_out.read();
}

void doImgProc::thread_outStream_TUSER() {
    outStream_TUSER = outStream_V_user_V_1_data_out.read();
}

void doImgProc::thread_outStream_TVALID() {
    outStream_TVALID = outStream_V_dest_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_data_V_1_ack_in() {
    outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_data_V_1_ack_out() {
    outStream_V_data_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_data_V_1_data_in = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_data_V_1_data_in = dataOutSideChannel_d_1_fu_1245_p3.read();
    } else {
        outStream_V_data_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgProc::thread_outStream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_sel.read())) {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B.read();
    } else {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_data_V_1_load_A() {
    outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full.read() & ~outStream_V_data_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_data_V_1_load_B() {
    outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr.read() & outStream_V_data_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_data_V_1_sel() {
    outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_data_V_1_state_cmp_full() {
    outStream_V_data_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_data_V_1_vld_out() {
    outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_dest_V_1_ack_in() {
    outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_dest_V_1_ack_out() {
    outStream_V_dest_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_dest_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_dest_V_1_data_in = dataOutSideChannel_d_reg_463.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_dest_V_1_data_in = tmp_dest_V_reg_1378_pp0_iter1_reg.read();
    } else {
        outStream_V_dest_V_1_data_in =  (sc_lv<6>) ("XXXXXX");
    }
}

void doImgProc::thread_outStream_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_sel.read())) {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B.read();
    } else {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_dest_V_1_load_A() {
    outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full.read() & ~outStream_V_dest_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_dest_V_1_load_B() {
    outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_sel_wr.read() & outStream_V_dest_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_dest_V_1_sel() {
    outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_dest_V_1_state_cmp_full() {
    outStream_V_dest_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_dest_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_dest_V_1_vld_out() {
    outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_id_V_1_ack_in() {
    outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_id_V_1_ack_out() {
    outStream_V_id_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_id_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_id_V_1_data_in = dataOutSideChannel_i_reg_411.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_id_V_1_data_in = tmp_id_V_reg_1372_pp0_iter1_reg.read();
    } else {
        outStream_V_id_V_1_data_in =  (sc_lv<5>) ("XXXXX");
    }
}

void doImgProc::thread_outStream_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_sel.read())) {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B.read();
    } else {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_id_V_1_load_A() {
    outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full.read() & ~outStream_V_id_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_id_V_1_load_B() {
    outStream_V_id_V_1_load_B = (outStream_V_id_V_1_sel_wr.read() & outStream_V_id_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_id_V_1_sel() {
    outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_id_V_1_state_cmp_full() {
    outStream_V_id_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_id_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_id_V_1_vld_out() {
    outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_keep_V_1_ack_in() {
    outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_keep_V_1_ack_out() {
    outStream_V_keep_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_keep_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_keep_V_1_data_in = dataOutSideChannel_k_reg_450.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_keep_V_1_data_in = tmp_keep_V_reg_1354_pp0_iter1_reg.read();
    } else {
        outStream_V_keep_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgProc::thread_outStream_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_sel.read())) {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B.read();
    } else {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_keep_V_1_load_A() {
    outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full.read() & ~outStream_V_keep_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_keep_V_1_load_B() {
    outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_sel_wr.read() & outStream_V_keep_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_keep_V_1_sel() {
    outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_keep_V_1_state_cmp_full() {
    outStream_V_keep_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_keep_V_1_vld_out() {
    outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_last_V_1_ack_in() {
    outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_last_V_1_ack_out() {
    outStream_V_last_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_last_V_1_data_in = tmp_last_V_fu_1264_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        outStream_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgProc::thread_outStream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_sel.read())) {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B.read();
    } else {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_last_V_1_load_A() {
    outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full.read() & ~outStream_V_last_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_last_V_1_load_B() {
    outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr.read() & outStream_V_last_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_last_V_1_sel() {
    outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_last_V_1_state_cmp_full() {
    outStream_V_last_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_last_V_1_vld_out() {
    outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_strb_V_1_ack_in() {
    outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_strb_V_1_ack_out() {
    outStream_V_strb_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_strb_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_strb_V_1_data_in = dataOutSideChannel_s_reg_437.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_strb_V_1_data_in = tmp_strb_V_reg_1360_pp0_iter1_reg.read();
    } else {
        outStream_V_strb_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgProc::thread_outStream_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_sel.read())) {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B.read();
    } else {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_strb_V_1_load_A() {
    outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full.read() & ~outStream_V_strb_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_strb_V_1_load_B() {
    outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_sel_wr.read() & outStream_V_strb_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_strb_V_1_sel() {
    outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_strb_V_1_state_cmp_full() {
    outStream_V_strb_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_strb_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_strb_V_1_vld_out() {
    outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state.read()[0];
}

void doImgProc::thread_outStream_V_user_V_1_ack_in() {
    outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state.read()[1];
}

void doImgProc::thread_outStream_V_user_V_1_ack_out() {
    outStream_V_user_V_1_ack_out = outStream_TREADY.read();
}

void doImgProc::thread_outStream_V_user_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read())))) {
        outStream_V_user_V_1_data_in = dataOutSideChannel_u_reg_424.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        outStream_V_user_V_1_data_in = tmp_user_V_reg_1366_pp0_iter1_reg.read();
    } else {
        outStream_V_user_V_1_data_in =  (sc_lv<2>) ("XX");
    }
}

void doImgProc::thread_outStream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_sel.read())) {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B.read();
    } else {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A.read();
    }
}

void doImgProc::thread_outStream_V_user_V_1_load_A() {
    outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full.read() & ~outStream_V_user_V_1_sel_wr.read());
}

void doImgProc::thread_outStream_V_user_V_1_load_B() {
    outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr.read() & outStream_V_user_V_1_state_cmp_full.read());
}

void doImgProc::thread_outStream_V_user_V_1_sel() {
    outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd.read();
}

void doImgProc::thread_outStream_V_user_V_1_state_cmp_full() {
    outStream_V_user_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgProc::thread_outStream_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_1350_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        outStream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgProc::thread_outStream_V_user_V_1_vld_out() {
    outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state.read()[0];
}

void doImgProc::thread_p_neg_fu_1163_p2() {
    p_neg_fu_1163_p2 = (!ap_const_lv17_0.is_01() || !tmp_20_tr_fu_1151_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(ap_const_lv17_0) - sc_bigint<17>(tmp_20_tr_fu_1151_p1.read()));
}

void doImgProc::thread_p_s_fu_1237_p3() {
    p_s_fu_1237_p3 = (!tmp_13_fu_1229_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_13_fu_1229_p3.read()[0].to_bool())? ap_const_lv8_0: tmp_10_fu_1225_p1.read());
}

void doImgProc::thread_phitmp_fu_948_p2() {
    phitmp_fu_948_p2 = (!countWait_reg_512.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(countWait_reg_512.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void doImgProc::thread_pixConvolved_1_fu_1055_p3() {
    pixConvolved_1_fu_1055_p3 = (!sel_tmp9_fu_1051_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp9_fu_1051_p2.read()[0].to_bool())? pixConvolved_3_reg_1389.read(): sel_tmp7_fu_1045_p3.read());
}

void doImgProc::thread_pixConvolved_2_fu_1062_p3() {
    pixConvolved_2_fu_1062_p3 = (!tmp_11_reg_1577.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1577.read()[0].to_bool())? pixConvolved_1_fu_1055_p3.read(): ap_const_lv32_0);
}

void doImgProc::thread_pixConvolved_3_fu_615_p2() {
    pixConvolved_3_fu_615_p2 = (!ap_const_lv32_1.is_01() || !ap_phi_mux_pixConvolved_phi_fu_504_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(ap_phi_mux_pixConvolved_phi_fu_504_p4.read()));
}

void doImgProc::thread_sel_tmp10_fu_1135_p3() {
    sel_tmp10_fu_1135_p3 = (!sel_tmp6_reg_1632.read()[0].is_01())? sc_lv<8>(): ((sel_tmp6_reg_1632.read()[0].to_bool())? valInWindow_0_minVal_7_fu_1109_p3.read(): sel_tmp_fu_1128_p3.read());
}

void doImgProc::thread_sel_tmp1_fu_720_p3() {
    sel_tmp1_fu_720_p3 = (!or_cond_fu_705_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_705_p2.read()[0].to_bool())? pixConvolved_3_reg_1389.read(): pixConvolved_reg_500.read());
}

void doImgProc::thread_sel_tmp2_fu_547_p2() {
    sel_tmp2_fu_547_p2 = (!operation.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(operation.read() == ap_const_lv32_2);
}

void doImgProc::thread_sel_tmp3_fu_727_p2() {
    sel_tmp3_fu_727_p2 = (or_cond_fu_705_p2.read() & sel_tmp2_reg_1316.read());
}

void doImgProc::thread_sel_tmp4_fu_732_p3() {
    sel_tmp4_fu_732_p3 = (!sel_tmp3_fu_727_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_727_p2.read()[0].to_bool())? pixConvolved_3_reg_1389.read(): sel_tmp1_fu_720_p3.read());
}

void doImgProc::thread_sel_tmp5_fu_553_p2() {
    sel_tmp5_fu_553_p2 = (!operation.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(operation.read() == ap_const_lv32_1);
}

void doImgProc::thread_sel_tmp6_fu_1041_p2() {
    sel_tmp6_fu_1041_p2 = (or_cond_reg_1480.read() & sel_tmp5_reg_1321.read());
}

void doImgProc::thread_sel_tmp7_fu_1045_p3() {
    sel_tmp7_fu_1045_p3 = (!sel_tmp6_fu_1041_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp6_fu_1041_p2.read()[0].to_bool())? pixConvolved_3_reg_1389.read(): sel_tmp4_reg_1504.read());
}

void doImgProc::thread_sel_tmp8_fu_559_p2() {
    sel_tmp8_fu_559_p2 = (!operation.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(operation.read() == ap_const_lv32_0);
}

void doImgProc::thread_sel_tmp9_fu_1051_p2() {
    sel_tmp9_fu_1051_p2 = (or_cond_reg_1480.read() & sel_tmp8_reg_1326.read());
}

void doImgProc::thread_sel_tmp_fu_1128_p3() {
    sel_tmp_fu_1128_p3 = (!sel_tmp3_reg_1499.read()[0].is_01())? sc_lv<8>(): ((sel_tmp3_reg_1499.read()[0].to_bool())? valInWindow_0_maxVal_7_fu_1121_p3.read(): ap_const_lv8_0);
}

void doImgProc::thread_tmp1_fu_1008_p2() {
    tmp1_fu_1008_p2 = (!window_val_2_1_fu_1002_p2.read().is_01() || !window_val_2_0_reg_1593.read().is_01())? sc_lv<16>(): (sc_biguint<16>(window_val_2_1_fu_1002_p2.read()) + sc_biguint<16>(window_val_2_0_reg_1593.read()));
}

void doImgProc::thread_tmp2_fu_1081_p2() {
    tmp2_fu_1081_p2 = (!window_val_1_1_reg_1543.read().is_01() || !window_val_1_2_reg_1560.read().is_01())? sc_lv<16>(): (sc_biguint<16>(window_val_1_1_reg_1543.read()) + sc_biguint<16>(window_val_1_2_reg_1560.read()));
}

void doImgProc::thread_tmp3_fu_1085_p2() {
    tmp3_fu_1085_p2 = (!tmp1_reg_1615.read().is_01() || !tmp2_fu_1081_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp1_reg_1615.read()) + sc_biguint<16>(tmp2_fu_1081_p2.read()));
}

void doImgProc::thread_tmp4_fu_711_p2() {
    tmp4_fu_711_p2 = (!window_val_0_0_reg_1422.read().is_01() || !window_val_0_1_fu_667_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(window_val_0_0_reg_1422.read()) + sc_biguint<16>(window_val_0_1_fu_667_p2.read()));
}

void doImgProc::thread_tmp5_fu_1090_p2() {
    tmp5_fu_1090_p2 = (!window_val_2_2_fu_1075_p2.read().is_01() || !window_val_0_2_reg_1509.read().is_01())? sc_lv<16>(): (sc_biguint<16>(window_val_2_2_fu_1075_p2.read()) + sc_biguint<16>(window_val_0_2_reg_1509.read()));
}

void doImgProc::thread_tmp6_fu_1095_p2() {
    tmp6_fu_1095_p2 = (!window_val_1_0_reg_1526.read().is_01() || !tmp5_fu_1090_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(window_val_1_0_reg_1526.read()) + sc_biguint<16>(tmp5_fu_1090_p2.read()));
}

void doImgProc::thread_tmp7_fu_1142_p2() {
    tmp7_fu_1142_p2 = (!tmp4_reg_1486.read().is_01() || !tmp6_reg_1652.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp4_reg_1486.read()) + sc_biguint<16>(tmp6_reg_1652.read()));
}

void doImgProc::thread_tmp_10_cast_fu_1214_p1() {
    tmp_10_cast_fu_1214_p1 = esl_zext<15,14>(tmp_8_fu_1205_p1.read());
}

void doImgProc::thread_tmp_10_fu_1225_p1() {
    tmp_10_fu_1225_p1 = valOutput_1_fu_1218_p3.read().range(8-1, 0);
}

void doImgProc::thread_tmp_11_0_1_i_fu_781_p2() {
    tmp_11_0_1_i_fu_781_p2 = (!tmp_15_reg_1491.read().is_01() || !tmp_14_reg_1462.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_15_reg_1491.read()) > sc_biguint<8>(tmp_14_reg_1462.read()));
}

void doImgProc::thread_tmp_11_0_2_i_fu_791_p2() {
    tmp_11_0_2_i_fu_791_p2 = (!tmp_16_fu_763_p1.read().is_01() || !valInWindow_0_maxVal_fu_785_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_16_fu_763_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_fu_785_p3.read()));
}

void doImgProc::thread_tmp_11_1_1_i_fu_875_p2() {
    tmp_11_1_1_i_fu_875_p2 = (!tmp_18_fu_859_p1.read().is_01() || !valInWindow_0_maxVal_2_reg_1537.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_18_fu_859_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_2_reg_1537.read()));
}

void doImgProc::thread_tmp_11_1_2_i_fu_916_p2() {
    tmp_11_1_2_i_fu_916_p2 = (!tmp_19_fu_900_p1.read().is_01() || !valInWindow_0_maxVal_3_reg_1554.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_19_fu_900_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_3_reg_1554.read()));
}

void doImgProc::thread_tmp_11_1_i_fu_834_p2() {
    tmp_11_1_i_fu_834_p2 = (!tmp_17_fu_818_p1.read().is_01() || !valInWindow_0_maxVal_1_reg_1520.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_17_fu_818_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_1_reg_1520.read()));
}

void doImgProc::thread_tmp_11_2_1_i_fu_1029_p2() {
    tmp_11_2_1_i_fu_1029_p2 = (!tmp_21_fu_1013_p1.read().is_01() || !valInWindow_0_maxVal_5_reg_1609.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_21_fu_1013_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_5_reg_1609.read()));
}

void doImgProc::thread_tmp_11_2_2_i_fu_1116_p2() {
    tmp_11_2_2_i_fu_1116_p2 = (!tmp_22_fu_1100_p1.read().is_01() || !valInWindow_0_maxVal_6_reg_1626.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_22_fu_1100_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_6_reg_1626.read()));
}

void doImgProc::thread_tmp_11_2_i_fu_983_p2() {
    tmp_11_2_i_fu_983_p2 = (!tmp_20_fu_967_p1.read().is_01() || !valInWindow_0_maxVal_4_reg_1571.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_20_fu_967_p1.read()) > sc_biguint<8>(valInWindow_0_maxVal_4_reg_1571.read()));
}

void doImgProc::thread_tmp_11_fu_928_p2() {
    tmp_11_fu_928_p2 = (!col_assign_reg_476.read().is_01() || !ap_const_lv32_EF.is_01())? sc_lv<1>(): (sc_bigint<32>(col_assign_reg_476.read()) < sc_bigint<32>(ap_const_lv32_EF));
}

void doImgProc::thread_tmp_12_fu_577_p2() {
    tmp_12_fu_577_p2 = (!ap_phi_mux_countWait_phi_fu_516_p4.read().is_01() || !ap_const_lv17_F1.is_01())? sc_lv<1>(): (sc_biguint<17>(ap_phi_mux_countWait_phi_fu_516_p4.read()) > sc_biguint<17>(ap_const_lv17_F1));
}

void doImgProc::thread_tmp_13_fu_1229_p3() {
    tmp_13_fu_1229_p3 = valOutput_1_fu_1218_p3.read().range(14, 14);
}

void doImgProc::thread_tmp_14_fu_655_p1() {
    tmp_14_fu_655_p1 = window_val_0_0_fu_636_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_15_fu_716_p1() {
    tmp_15_fu_716_p1 = window_val_0_1_fu_667_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_16_fu_763_p1() {
    tmp_16_fu_763_p1 = window_val_0_2_fu_747_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_17_fu_818_p1() {
    tmp_17_fu_818_p1 = window_val_1_0_fu_812_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_18_fu_859_p1() {
    tmp_18_fu_859_p1 = window_val_1_1_fu_853_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_19_fu_900_p1() {
    tmp_19_fu_900_p1 = window_val_1_2_fu_894_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_1_fu_673_p4() {
    tmp_1_fu_673_p4 = ap_phi_mux_idxRow_phi_fu_492_p4.read().range(31, 1);
}

void doImgProc::thread_tmp_20_fu_967_p1() {
    tmp_20_fu_967_p1 = window_val_2_0_fu_961_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_20_tr_fu_1151_p1() {
    tmp_20_tr_fu_1151_p1 = esl_sext<17,16>(valOutput_fu_1146_p2.read());
}

void doImgProc::thread_tmp_21_fu_1013_p1() {
    tmp_21_fu_1013_p1 = window_val_2_1_fu_1002_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_22_fu_1100_p1() {
    tmp_22_fu_1100_p1 = window_val_2_2_fu_1075_p2.read().range(8-1, 0);
}

void doImgProc::thread_tmp_27_0_1_fu_621_p1() {
    tmp_27_0_1_fu_621_p1 = esl_zext<64,32>(pixConvolved_3_fu_615_p2.read());
}

void doImgProc::thread_tmp_27_0_2_fu_648_p1() {
    tmp_27_0_2_fu_648_p1 = esl_zext<64,32>(col_assign_1_0_2_fu_642_p2.read());
}

void doImgProc::thread_tmp_2_fu_689_p4() {
    tmp_2_fu_689_p4 = col_assign_reg_476.read().range(31, 1);
}

void doImgProc::thread_tmp_5_0_1_i_fu_753_p2() {
    tmp_5_0_1_i_fu_753_p2 = (!tmp_15_reg_1491.read().is_01() || !tmp_14_reg_1462.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_15_reg_1491.read()) < sc_biguint<8>(tmp_14_reg_1462.read()));
}

void doImgProc::thread_tmp_5_0_2_i_fu_767_p2() {
    tmp_5_0_2_i_fu_767_p2 = (!tmp_16_fu_763_p1.read().is_01() || !valInWindow_0_minVal_fu_757_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_16_fu_763_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_fu_757_p3.read()));
}

void doImgProc::thread_tmp_5_1_1_i_fu_863_p2() {
    tmp_5_1_1_i_fu_863_p2 = (!tmp_18_fu_859_p1.read().is_01() || !valInWindow_0_minVal_2_reg_1531.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_18_fu_859_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_2_reg_1531.read()));
}

void doImgProc::thread_tmp_5_1_2_i_fu_904_p2() {
    tmp_5_1_2_i_fu_904_p2 = (!tmp_19_fu_900_p1.read().is_01() || !valInWindow_0_minVal_3_reg_1548.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_19_fu_900_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_3_reg_1548.read()));
}

void doImgProc::thread_tmp_5_1_i_fu_822_p2() {
    tmp_5_1_i_fu_822_p2 = (!tmp_17_fu_818_p1.read().is_01() || !valInWindow_0_minVal_1_reg_1514.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_17_fu_818_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_1_reg_1514.read()));
}

void doImgProc::thread_tmp_5_2_1_i_fu_1017_p2() {
    tmp_5_2_1_i_fu_1017_p2 = (!tmp_21_fu_1013_p1.read().is_01() || !valInWindow_0_minVal_5_reg_1603.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_21_fu_1013_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_5_reg_1603.read()));
}

void doImgProc::thread_tmp_5_2_2_i_fu_1104_p2() {
    tmp_5_2_2_i_fu_1104_p2 = (!tmp_22_fu_1100_p1.read().is_01() || !valInWindow_0_minVal_6_reg_1620.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_22_fu_1100_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_6_reg_1620.read()));
}

void doImgProc::thread_tmp_5_2_i_fu_971_p2() {
    tmp_5_2_i_fu_971_p2 = (!tmp_20_fu_967_p1.read().is_01() || !valInWindow_0_minVal_4_reg_1565.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_20_fu_967_p1.read()) < sc_biguint<8>(valInWindow_0_minVal_4_reg_1565.read()));
}

void doImgProc::thread_tmp_5_cast_fu_1202_p1() {
    tmp_5_cast_fu_1202_p1 = esl_zext<15,14>(tmp_6_reg_1667.read());
}

void doImgProc::thread_tmp_5_fu_608_p1() {
    tmp_5_fu_608_p1 = esl_zext<64,32>(ap_phi_mux_pixConvolved_phi_fu_504_p4.read());
}

void doImgProc::thread_tmp_8_fu_1205_p1() {
    tmp_8_fu_1205_p1 = esl_sext<14,13>(tmp_7_reg_1672.read());
}

void doImgProc::thread_tmp_9_fu_1208_p2() {
    tmp_9_fu_1208_p2 = (!ap_const_lv15_0.is_01() || !tmp_5_cast_fu_1202_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(ap_const_lv15_0) - sc_biguint<15>(tmp_5_cast_fu_1202_p1.read()));
}

void doImgProc::thread_tmp_last_V_fu_1264_p2() {
    tmp_last_V_fu_1264_p2 = (!countWait_1_reg_524.read().is_01() || !ap_const_lv8_EF.is_01())? sc_lv<1>(): (sc_biguint<8>(countWait_1_reg_524.read()) > sc_biguint<8>(ap_const_lv8_EF));
}

void doImgProc::thread_tmp_s_fu_571_p1() {
    tmp_s_fu_571_p1 = esl_zext<64,32>(ap_phi_mux_col_assign_phi_fu_480_p4.read());
}

void doImgProc::thread_valInWindow_0_maxVal_1_fu_797_p3() {
    valInWindow_0_maxVal_1_fu_797_p3 = (!tmp_11_0_2_i_fu_791_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_0_2_i_fu_791_p2.read()[0].to_bool())? tmp_16_fu_763_p1.read(): valInWindow_0_maxVal_fu_785_p3.read());
}

void doImgProc::thread_valInWindow_0_maxVal_2_fu_839_p3() {
    valInWindow_0_maxVal_2_fu_839_p3 = (!tmp_11_1_i_fu_834_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_1_i_fu_834_p2.read()[0].to_bool())? tmp_17_fu_818_p1.read(): valInWindow_0_maxVal_1_reg_1520.read());
}

void doImgProc::thread_valInWindow_0_maxVal_3_fu_880_p3() {
    valInWindow_0_maxVal_3_fu_880_p3 = (!tmp_11_1_1_i_fu_875_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_1_1_i_fu_875_p2.read()[0].to_bool())? tmp_18_fu_859_p1.read(): valInWindow_0_maxVal_2_reg_1537.read());
}

void doImgProc::thread_valInWindow_0_maxVal_4_fu_921_p3() {
    valInWindow_0_maxVal_4_fu_921_p3 = (!tmp_11_1_2_i_fu_916_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_1_2_i_fu_916_p2.read()[0].to_bool())? tmp_19_fu_900_p1.read(): valInWindow_0_maxVal_3_reg_1554.read());
}

void doImgProc::thread_valInWindow_0_maxVal_5_fu_988_p3() {
    valInWindow_0_maxVal_5_fu_988_p3 = (!tmp_11_2_i_fu_983_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_2_i_fu_983_p2.read()[0].to_bool())? tmp_20_fu_967_p1.read(): valInWindow_0_maxVal_4_reg_1571.read());
}

void doImgProc::thread_valInWindow_0_maxVal_6_fu_1034_p3() {
    valInWindow_0_maxVal_6_fu_1034_p3 = (!tmp_11_2_1_i_fu_1029_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_2_1_i_fu_1029_p2.read()[0].to_bool())? tmp_21_fu_1013_p1.read(): valInWindow_0_maxVal_5_reg_1609.read());
}

void doImgProc::thread_valInWindow_0_maxVal_7_fu_1121_p3() {
    valInWindow_0_maxVal_7_fu_1121_p3 = (!tmp_11_2_2_i_fu_1116_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_2_2_i_fu_1116_p2.read()[0].to_bool())? tmp_22_fu_1100_p1.read(): valInWindow_0_maxVal_6_reg_1626.read());
}

void doImgProc::thread_valInWindow_0_maxVal_fu_785_p3() {
    valInWindow_0_maxVal_fu_785_p3 = (!tmp_11_0_1_i_fu_781_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_11_0_1_i_fu_781_p2.read()[0].to_bool())? tmp_15_reg_1491.read(): tmp_14_reg_1462.read());
}

void doImgProc::thread_valInWindow_0_minVal_1_fu_773_p3() {
    valInWindow_0_minVal_1_fu_773_p3 = (!tmp_5_0_2_i_fu_767_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_0_2_i_fu_767_p2.read()[0].to_bool())? tmp_16_fu_763_p1.read(): valInWindow_0_minVal_fu_757_p3.read());
}

void doImgProc::thread_valInWindow_0_minVal_2_fu_827_p3() {
    valInWindow_0_minVal_2_fu_827_p3 = (!tmp_5_1_i_fu_822_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_1_i_fu_822_p2.read()[0].to_bool())? tmp_17_fu_818_p1.read(): valInWindow_0_minVal_1_reg_1514.read());
}

void doImgProc::thread_valInWindow_0_minVal_3_fu_868_p3() {
    valInWindow_0_minVal_3_fu_868_p3 = (!tmp_5_1_1_i_fu_863_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_1_1_i_fu_863_p2.read()[0].to_bool())? tmp_18_fu_859_p1.read(): valInWindow_0_minVal_2_reg_1531.read());
}

void doImgProc::thread_valInWindow_0_minVal_4_fu_909_p3() {
    valInWindow_0_minVal_4_fu_909_p3 = (!tmp_5_1_2_i_fu_904_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_1_2_i_fu_904_p2.read()[0].to_bool())? tmp_19_fu_900_p1.read(): valInWindow_0_minVal_3_reg_1548.read());
}

void doImgProc::thread_valInWindow_0_minVal_5_fu_976_p3() {
    valInWindow_0_minVal_5_fu_976_p3 = (!tmp_5_2_i_fu_971_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_2_i_fu_971_p2.read()[0].to_bool())? tmp_20_fu_967_p1.read(): valInWindow_0_minVal_4_reg_1565.read());
}

void doImgProc::thread_valInWindow_0_minVal_6_fu_1022_p3() {
    valInWindow_0_minVal_6_fu_1022_p3 = (!tmp_5_2_1_i_fu_1017_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_2_1_i_fu_1017_p2.read()[0].to_bool())? tmp_21_fu_1013_p1.read(): valInWindow_0_minVal_5_reg_1603.read());
}

void doImgProc::thread_valInWindow_0_minVal_7_fu_1109_p3() {
    valInWindow_0_minVal_7_fu_1109_p3 = (!tmp_5_2_2_i_fu_1104_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_2_2_i_fu_1104_p2.read()[0].to_bool())? tmp_22_fu_1100_p1.read(): valInWindow_0_minVal_6_reg_1620.read());
}

void doImgProc::thread_valInWindow_0_minVal_fu_757_p3() {
    valInWindow_0_minVal_fu_757_p3 = (!tmp_5_0_1_i_fu_753_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_0_1_i_fu_753_p2.read()[0].to_bool())? tmp_15_reg_1491.read(): tmp_14_reg_1462.read());
}

void doImgProc::thread_valOutput_1_fu_1218_p3() {
    valOutput_1_fu_1218_p3 = (!tmp_4_reg_1662.read()[0].is_01())? sc_lv<15>(): ((tmp_4_reg_1662.read()[0].to_bool())? tmp_9_fu_1208_p2.read(): tmp_10_cast_fu_1214_p1.read());
}

void doImgProc::thread_valOutput_fu_1146_p2() {
    valOutput_fu_1146_p2 = (!tmp3_reg_1647.read().is_01() || !tmp7_fu_1142_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp3_reg_1647.read()) + sc_biguint<16>(tmp7_fu_1142_p2.read()));
}

void doImgProc::thread_window_val_0_0_fu_636_p0() {
    window_val_0_0_fu_636_p0 = reg_535.read();
}

void doImgProc::thread_window_val_0_0_fu_636_p1() {
    window_val_0_0_fu_636_p1 =  (sc_lv<8>) (window_val_0_0_fu_636_p10.read());
}

void doImgProc::thread_window_val_0_0_fu_636_p10() {
    window_val_0_0_fu_636_p10 = esl_zext<16,8>(lineBuff_val_0_q0.read());
}

void doImgProc::thread_window_val_0_0_fu_636_p2() {
    window_val_0_0_fu_636_p2 = (!window_val_0_0_fu_636_p0.read().is_01() || !window_val_0_0_fu_636_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_0_0_fu_636_p0.read()) * sc_biguint<8>(window_val_0_0_fu_636_p1.read());
}

void doImgProc::thread_window_val_0_1_fu_667_p0() {
    window_val_0_1_fu_667_p0 = reg_539.read();
}

void doImgProc::thread_window_val_0_1_fu_667_p1() {
    window_val_0_1_fu_667_p1 =  (sc_lv<8>) (window_val_0_1_fu_667_p10.read());
}

void doImgProc::thread_window_val_0_1_fu_667_p10() {
    window_val_0_1_fu_667_p10 = esl_zext<16,8>(reg_543.read());
}

void doImgProc::thread_window_val_0_1_fu_667_p2() {
    window_val_0_1_fu_667_p2 = (!window_val_0_1_fu_667_p0.read().is_01() || !window_val_0_1_fu_667_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_0_1_fu_667_p0.read()) * sc_biguint<8>(window_val_0_1_fu_667_p1.read());
}

void doImgProc::thread_window_val_0_2_fu_747_p0() {
    window_val_0_2_fu_747_p0 = reg_535.read();
}

void doImgProc::thread_window_val_0_2_fu_747_p1() {
    window_val_0_2_fu_747_p1 =  (sc_lv<8>) (window_val_0_2_fu_747_p10.read());
}

void doImgProc::thread_window_val_0_2_fu_747_p10() {
    window_val_0_2_fu_747_p10 = esl_zext<16,8>(reg_543.read());
}

void doImgProc::thread_window_val_0_2_fu_747_p2() {
    window_val_0_2_fu_747_p2 = (!window_val_0_2_fu_747_p0.read().is_01() || !window_val_0_2_fu_747_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_0_2_fu_747_p0.read()) * sc_biguint<8>(window_val_0_2_fu_747_p1.read());
}

void doImgProc::thread_window_val_1_0_fu_812_p0() {
    window_val_1_0_fu_812_p0 = reg_539.read();
}

void doImgProc::thread_window_val_1_0_fu_812_p1() {
    window_val_1_0_fu_812_p1 =  (sc_lv<8>) (window_val_1_0_fu_812_p10.read());
}

void doImgProc::thread_window_val_1_0_fu_812_p10() {
    window_val_1_0_fu_812_p10 = esl_zext<16,8>(lineBuff_val_1_load_1_reg_1432.read());
}

void doImgProc::thread_window_val_1_0_fu_812_p2() {
    window_val_1_0_fu_812_p2 = (!window_val_1_0_fu_812_p0.read().is_01() || !window_val_1_0_fu_812_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_1_0_fu_812_p0.read()) * sc_biguint<8>(window_val_1_0_fu_812_p1.read());
}

void doImgProc::thread_window_val_1_1_fu_853_p0() {
    window_val_1_1_fu_853_p0 = reg_535.read();
}

void doImgProc::thread_window_val_1_1_fu_853_p1() {
    window_val_1_1_fu_853_p1 =  (sc_lv<8>) (window_val_1_1_fu_853_p10.read());
}

void doImgProc::thread_window_val_1_1_fu_853_p10() {
    window_val_1_1_fu_853_p10 = esl_zext<16,8>(lineBuff_val_1_load_2_reg_1437.read());
}

void doImgProc::thread_window_val_1_1_fu_853_p2() {
    window_val_1_1_fu_853_p2 = (!window_val_1_1_fu_853_p0.read().is_01() || !window_val_1_1_fu_853_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_1_1_fu_853_p0.read()) * sc_biguint<8>(window_val_1_1_fu_853_p1.read());
}

void doImgProc::thread_window_val_1_2_fu_894_p0() {
    window_val_1_2_fu_894_p0 = reg_539.read();
}

void doImgProc::thread_window_val_1_2_fu_894_p1() {
    window_val_1_2_fu_894_p1 =  (sc_lv<8>) (window_val_1_2_fu_894_p10.read());
}

void doImgProc::thread_window_val_1_2_fu_894_p10() {
    window_val_1_2_fu_894_p10 = esl_zext<16,8>(lineBuff_val_1_load_3_reg_1470.read());
}

void doImgProc::thread_window_val_1_2_fu_894_p2() {
    window_val_1_2_fu_894_p2 = (!window_val_1_2_fu_894_p0.read().is_01() || !window_val_1_2_fu_894_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_1_2_fu_894_p0.read()) * sc_biguint<8>(window_val_1_2_fu_894_p1.read());
}

void doImgProc::thread_window_val_2_0_fu_961_p0() {
    window_val_2_0_fu_961_p0 = reg_535.read();
}

void doImgProc::thread_window_val_2_0_fu_961_p1() {
    window_val_2_0_fu_961_p1 =  (sc_lv<8>) (window_val_2_0_fu_961_p10.read());
}

void doImgProc::thread_window_val_2_0_fu_961_p10() {
    window_val_2_0_fu_961_p10 = esl_zext<16,8>(lineBuff_val_2_load_1_reg_1447.read());
}

void doImgProc::thread_window_val_2_0_fu_961_p2() {
    window_val_2_0_fu_961_p2 = (!window_val_2_0_fu_961_p0.read().is_01() || !window_val_2_0_fu_961_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_0_fu_961_p0.read()) * sc_biguint<8>(window_val_2_0_fu_961_p1.read());
}

void doImgProc::thread_window_val_2_1_fu_1002_p0() {
    window_val_2_1_fu_1002_p0 = reg_539.read();
}

void doImgProc::thread_window_val_2_1_fu_1002_p1() {
    window_val_2_1_fu_1002_p1 =  (sc_lv<8>) (window_val_2_1_fu_1002_p10.read());
}

void doImgProc::thread_window_val_2_1_fu_1002_p10() {
    window_val_2_1_fu_1002_p10 = esl_zext<16,8>(lineBuff_val_2_load_2_reg_1452.read());
}

void doImgProc::thread_window_val_2_1_fu_1002_p2() {
    window_val_2_1_fu_1002_p2 = (!window_val_2_1_fu_1002_p0.read().is_01() || !window_val_2_1_fu_1002_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_1_fu_1002_p0.read()) * sc_biguint<8>(window_val_2_1_fu_1002_p1.read());
}

void doImgProc::thread_window_val_2_2_fu_1075_p0() {
    window_val_2_2_fu_1075_p0 = kernel_load_8_reg_1598.read();
}

void doImgProc::thread_window_val_2_2_fu_1075_p1() {
    window_val_2_2_fu_1075_p1 =  (sc_lv<8>) (window_val_2_2_fu_1075_p10.read());
}

void doImgProc::thread_window_val_2_2_fu_1075_p10() {
    window_val_2_2_fu_1075_p10 = esl_zext<16,8>(lineBuff_val_2_load_3_reg_1475.read());
}

void doImgProc::thread_window_val_2_2_fu_1075_p2() {
    window_val_2_2_fu_1075_p2 = (!window_val_2_2_fu_1075_p0.read().is_01() || !window_val_2_2_fu_1075_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_2_fu_1075_p0.read()) * sc_biguint<8>(window_val_2_2_fu_1075_p1.read());
}

void doImgProc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_565_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_565_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 256 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage8_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_1252_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_1252_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void doImgProc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWVALID\" :  \"" << s_axi_KERNEL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWREADY\" :  \"" << s_axi_KERNEL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWADDR\" :  \"" << s_axi_KERNEL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WVALID\" :  \"" << s_axi_KERNEL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_WREADY\" :  \"" << s_axi_KERNEL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WDATA\" :  \"" << s_axi_KERNEL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WSTRB\" :  \"" << s_axi_KERNEL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARVALID\" :  \"" << s_axi_KERNEL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARREADY\" :  \"" << s_axi_KERNEL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARADDR\" :  \"" << s_axi_KERNEL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RVALID\" :  \"" << s_axi_KERNEL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_RREADY\" :  \"" << s_axi_KERNEL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RDATA\" :  \"" << s_axi_KERNEL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RRESP\" :  \"" << s_axi_KERNEL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BVALID\" :  \"" << s_axi_KERNEL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_BREADY\" :  \"" << s_axi_KERNEL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BRESP\" :  \"" << s_axi_KERNEL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

